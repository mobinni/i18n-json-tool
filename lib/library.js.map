{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://library/./node_modules/ramda/es/internal/_curry1.js","webpack://library/./node_modules/ramda/es/always.js","webpack://library/./node_modules/ramda/es/F.js","webpack://library/./node_modules/ramda/es/T.js","webpack://library/./node_modules/ramda/es/__.js","webpack://library/./node_modules/ramda/es/internal/_curry2.js","webpack://library/./node_modules/ramda/es/add.js","webpack://library/./node_modules/ramda/es/internal/_concat.js","webpack://library/./node_modules/ramda/es/internal/_arity.js","webpack://library/./node_modules/ramda/es/internal/_curryN.js","webpack://library/./node_modules/ramda/es/curryN.js","webpack://library/./node_modules/ramda/es/addIndex.js","webpack://library/./node_modules/ramda/es/internal/_curry3.js","webpack://library/./node_modules/ramda/es/adjust.js","webpack://library/./node_modules/ramda/es/internal/_isArray.js","webpack://library/./node_modules/ramda/es/internal/_isTransformer.js","webpack://library/./node_modules/ramda/es/internal/_dispatchable.js","webpack://library/./node_modules/ramda/es/internal/_reduced.js","webpack://library/./node_modules/ramda/es/internal/_xfBase.js","webpack://library/./node_modules/ramda/es/internal/_xall.js","webpack://library/./node_modules/ramda/es/all.js","webpack://library/./node_modules/ramda/es/max.js","webpack://library/./node_modules/ramda/es/internal/_map.js","webpack://library/./node_modules/ramda/es/internal/_isString.js","webpack://library/./node_modules/ramda/es/internal/_isArrayLike.js","webpack://library/./node_modules/ramda/es/internal/_xwrap.js","webpack://library/./node_modules/ramda/es/bind.js","webpack://library/./node_modules/ramda/es/internal/_reduce.js","webpack://library/./node_modules/ramda/es/internal/_xmap.js","webpack://library/./node_modules/ramda/es/internal/_has.js","webpack://library/./node_modules/ramda/es/internal/_isArguments.js","webpack://library/./node_modules/ramda/es/keys.js","webpack://library/./node_modules/ramda/es/map.js","webpack://library/./node_modules/ramda/es/path.js","webpack://library/./node_modules/ramda/es/prop.js","webpack://library/./node_modules/ramda/es/pluck.js","webpack://library/./node_modules/ramda/es/reduce.js","webpack://library/./node_modules/ramda/es/allPass.js","webpack://library/./node_modules/ramda/es/and.js","webpack://library/./node_modules/ramda/es/internal/_xany.js","webpack://library/./node_modules/ramda/es/any.js","webpack://library/./node_modules/ramda/es/anyPass.js","webpack://library/./node_modules/ramda/es/ap.js","webpack://library/./node_modules/ramda/es/internal/_xaperture.js","webpack://library/./node_modules/ramda/es/aperture.js","webpack://library/./node_modules/ramda/es/internal/_aperture.js","webpack://library/./node_modules/ramda/es/append.js","webpack://library/./node_modules/ramda/es/apply.js","webpack://library/./node_modules/ramda/es/values.js","webpack://library/./node_modules/ramda/es/applySpec.js","webpack://library/./node_modules/ramda/es/applyTo.js","webpack://library/./node_modules/ramda/es/ascend.js","webpack://library/./node_modules/ramda/es/assoc.js","webpack://library/./node_modules/ramda/es/internal/_isInteger.js","webpack://library/./node_modules/ramda/es/isNil.js","webpack://library/./node_modules/ramda/es/assocPath.js","webpack://library/./node_modules/ramda/es/nAry.js","webpack://library/./node_modules/ramda/es/binary.js","webpack://library/./node_modules/ramda/es/internal/_isFunction.js","webpack://library/./node_modules/ramda/es/liftN.js","webpack://library/./node_modules/ramda/es/lift.js","webpack://library/./node_modules/ramda/es/both.js","webpack://library/./node_modules/ramda/es/curry.js","webpack://library/./node_modules/ramda/es/call.js","webpack://library/./node_modules/ramda/es/internal/_makeFlat.js","webpack://library/./node_modules/ramda/es/internal/_flatCat.js","webpack://library/./node_modules/ramda/es/internal/_forceReduced.js","webpack://library/./node_modules/ramda/es/chain.js","webpack://library/./node_modules/ramda/es/internal/_xchain.js","webpack://library/./node_modules/ramda/es/clamp.js","webpack://library/./node_modules/ramda/es/internal/_cloneRegExp.js","webpack://library/./node_modules/ramda/es/type.js","webpack://library/./node_modules/ramda/es/internal/_clone.js","webpack://library/./node_modules/ramda/es/clone.js","webpack://library/./node_modules/ramda/es/comparator.js","webpack://library/./node_modules/ramda/es/not.js","webpack://library/./node_modules/ramda/es/complement.js","webpack://library/./node_modules/ramda/es/internal/_pipe.js","webpack://library/./node_modules/ramda/es/internal/_checkForMethod.js","webpack://library/./node_modules/ramda/es/slice.js","webpack://library/./node_modules/ramda/es/tail.js","webpack://library/./node_modules/ramda/es/pipe.js","webpack://library/./node_modules/ramda/es/reverse.js","webpack://library/./node_modules/ramda/es/compose.js","webpack://library/./node_modules/ramda/es/composeK.js","webpack://library/./node_modules/ramda/es/internal/_pipeP.js","webpack://library/./node_modules/ramda/es/pipeP.js","webpack://library/./node_modules/ramda/es/composeP.js","webpack://library/./node_modules/ramda/es/internal/_arrayFromIterator.js","webpack://library/./node_modules/ramda/es/internal/_containsWith.js","webpack://library/./node_modules/ramda/es/identical.js","webpack://library/./node_modules/ramda/es/internal/_equals.js","webpack://library/./node_modules/ramda/es/internal/_functionName.js","webpack://library/./node_modules/ramda/es/equals.js","webpack://library/./node_modules/ramda/es/internal/_indexOf.js","webpack://library/./node_modules/ramda/es/internal/_contains.js","webpack://library/./node_modules/ramda/es/internal/_quote.js","webpack://library/./node_modules/ramda/es/internal/_toISOString.js","webpack://library/./node_modules/ramda/es/internal/_complement.js","webpack://library/./node_modules/ramda/es/internal/_filter.js","webpack://library/./node_modules/ramda/es/internal/_isObject.js","webpack://library/./node_modules/ramda/es/internal/_xfilter.js","webpack://library/./node_modules/ramda/es/filter.js","webpack://library/./node_modules/ramda/es/reject.js","webpack://library/./node_modules/ramda/es/toString.js","webpack://library/./node_modules/ramda/es/internal/_toString.js","webpack://library/./node_modules/ramda/es/concat.js","webpack://library/./node_modules/ramda/es/cond.js","webpack://library/./node_modules/ramda/es/constructN.js","webpack://library/./node_modules/ramda/es/construct.js","webpack://library/./node_modules/ramda/es/contains.js","webpack://library/./node_modules/ramda/es/converge.js","webpack://library/./node_modules/ramda/es/internal/_xreduceBy.js","webpack://library/./node_modules/ramda/es/reduceBy.js","webpack://library/./node_modules/ramda/es/countBy.js","webpack://library/./node_modules/ramda/es/dec.js","webpack://library/./node_modules/ramda/es/defaultTo.js","webpack://library/./node_modules/ramda/es/descend.js","webpack://library/./node_modules/ramda/es/difference.js","webpack://library/./node_modules/ramda/es/differenceWith.js","webpack://library/./node_modules/ramda/es/dissoc.js","webpack://library/./node_modules/ramda/es/remove.js","webpack://library/./node_modules/ramda/es/update.js","webpack://library/./node_modules/ramda/es/dissocPath.js","webpack://library/./node_modules/ramda/es/divide.js","webpack://library/./node_modules/ramda/es/internal/_xdrop.js","webpack://library/./node_modules/ramda/es/drop.js","webpack://library/./node_modules/ramda/es/internal/_xtake.js","webpack://library/./node_modules/ramda/es/take.js","webpack://library/./node_modules/ramda/es/internal/_xdropLast.js","webpack://library/./node_modules/ramda/es/dropLast.js","webpack://library/./node_modules/ramda/es/internal/_dropLast.js","webpack://library/./node_modules/ramda/es/internal/_xdropLastWhile.js","webpack://library/./node_modules/ramda/es/dropLastWhile.js","webpack://library/./node_modules/ramda/es/internal/_dropLastWhile.js","webpack://library/./node_modules/ramda/es/internal/_xdropRepeatsWith.js","webpack://library/./node_modules/ramda/es/nth.js","webpack://library/./node_modules/ramda/es/last.js","webpack://library/./node_modules/ramda/es/dropRepeatsWith.js","webpack://library/./node_modules/ramda/es/dropRepeats.js","webpack://library/./node_modules/ramda/es/internal/_xdropWhile.js","webpack://library/./node_modules/ramda/es/dropWhile.js","webpack://library/./node_modules/ramda/es/or.js","webpack://library/./node_modules/ramda/es/either.js","webpack://library/./node_modules/ramda/es/empty.js","webpack://library/./node_modules/ramda/es/takeLast.js","webpack://library/./node_modules/ramda/es/endsWith.js","webpack://library/./node_modules/ramda/es/eqBy.js","webpack://library/./node_modules/ramda/es/eqProps.js","webpack://library/./node_modules/ramda/es/evolve.js","webpack://library/./node_modules/ramda/es/internal/_xfind.js","webpack://library/./node_modules/ramda/es/find.js","webpack://library/./node_modules/ramda/es/internal/_xfindIndex.js","webpack://library/./node_modules/ramda/es/findIndex.js","webpack://library/./node_modules/ramda/es/internal/_xfindLast.js","webpack://library/./node_modules/ramda/es/findLast.js","webpack://library/./node_modules/ramda/es/internal/_xfindLastIndex.js","webpack://library/./node_modules/ramda/es/findLastIndex.js","webpack://library/./node_modules/ramda/es/flatten.js","webpack://library/./node_modules/ramda/es/flip.js","webpack://library/./node_modules/ramda/es/forEach.js","webpack://library/./node_modules/ramda/es/forEachObjIndexed.js","webpack://library/./node_modules/ramda/es/fromPairs.js","webpack://library/./node_modules/ramda/es/groupBy.js","webpack://library/./node_modules/ramda/es/groupWith.js","webpack://library/./node_modules/ramda/es/gt.js","webpack://library/./node_modules/ramda/es/gte.js","webpack://library/./node_modules/ramda/es/has.js","webpack://library/./node_modules/ramda/es/hasIn.js","webpack://library/./node_modules/ramda/es/head.js","webpack://library/./node_modules/ramda/es/internal/_identity.js","webpack://library/./node_modules/ramda/es/identity.js","webpack://library/./node_modules/ramda/es/ifElse.js","webpack://library/./node_modules/ramda/es/inc.js","webpack://library/./node_modules/ramda/es/indexBy.js","webpack://library/./node_modules/ramda/es/indexOf.js","webpack://library/./node_modules/ramda/es/init.js","webpack://library/./node_modules/ramda/es/innerJoin.js","webpack://library/./node_modules/ramda/es/insert.js","webpack://library/./node_modules/ramda/es/insertAll.js","webpack://library/./node_modules/ramda/es/internal/_Set.js","webpack://library/./node_modules/ramda/es/uniqBy.js","webpack://library/./node_modules/ramda/es/uniq.js","webpack://library/./node_modules/ramda/es/intersection.js","webpack://library/./node_modules/ramda/es/intersperse.js","webpack://library/./node_modules/ramda/es/internal/_assign.js","webpack://library/./node_modules/ramda/es/internal/_objectAssign.js","webpack://library/./node_modules/ramda/es/objOf.js","webpack://library/./node_modules/ramda/es/internal/_stepCat.js","webpack://library/./node_modules/ramda/es/into.js","webpack://library/./node_modules/ramda/es/invert.js","webpack://library/./node_modules/ramda/es/invertObj.js","webpack://library/./node_modules/ramda/es/invoker.js","webpack://library/./node_modules/ramda/es/is.js","webpack://library/./node_modules/ramda/es/isEmpty.js","webpack://library/./node_modules/ramda/es/join.js","webpack://library/./node_modules/ramda/es/juxt.js","webpack://library/./node_modules/ramda/es/keysIn.js","webpack://library/./node_modules/ramda/es/lastIndexOf.js","webpack://library/./node_modules/ramda/es/internal/_isNumber.js","webpack://library/./node_modules/ramda/es/length.js","webpack://library/./node_modules/ramda/es/lens.js","webpack://library/./node_modules/ramda/es/lensIndex.js","webpack://library/./node_modules/ramda/es/lensPath.js","webpack://library/./node_modules/ramda/es/lensProp.js","webpack://library/./node_modules/ramda/es/lt.js","webpack://library/./node_modules/ramda/es/lte.js","webpack://library/./node_modules/ramda/es/mapAccum.js","webpack://library/./node_modules/ramda/es/mapAccumRight.js","webpack://library/./node_modules/ramda/es/mapObjIndexed.js","webpack://library/./node_modules/ramda/es/match.js","webpack://library/./node_modules/ramda/es/mathMod.js","webpack://library/./node_modules/ramda/es/maxBy.js","webpack://library/./node_modules/ramda/es/sum.js","webpack://library/./node_modules/ramda/es/mean.js","webpack://library/./node_modules/ramda/es/median.js","webpack://library/./node_modules/ramda/es/memoizeWith.js","webpack://library/./node_modules/ramda/es/memoize.js","webpack://library/./node_modules/ramda/es/merge.js","webpack://library/./node_modules/ramda/es/mergeAll.js","webpack://library/./node_modules/ramda/es/mergeWithKey.js","webpack://library/./node_modules/ramda/es/mergeDeepWithKey.js","webpack://library/./node_modules/ramda/es/mergeDeepLeft.js","webpack://library/./node_modules/ramda/es/mergeDeepRight.js","webpack://library/./node_modules/ramda/es/mergeDeepWith.js","webpack://library/./node_modules/ramda/es/mergeWith.js","webpack://library/./node_modules/ramda/es/min.js","webpack://library/./node_modules/ramda/es/minBy.js","webpack://library/./node_modules/ramda/es/modulo.js","webpack://library/./node_modules/ramda/es/multiply.js","webpack://library/./node_modules/ramda/es/negate.js","webpack://library/./node_modules/ramda/es/none.js","webpack://library/./node_modules/ramda/es/nthArg.js","webpack://library/./node_modules/ramda/es/o.js","webpack://library/./node_modules/ramda/es/of.js","webpack://library/./node_modules/ramda/es/internal/_of.js","webpack://library/./node_modules/ramda/es/omit.js","webpack://library/./node_modules/ramda/es/once.js","webpack://library/./node_modules/ramda/es/over.js","webpack://library/./node_modules/ramda/es/pair.js","webpack://library/./node_modules/ramda/es/internal/_createPartialApplicator.js","webpack://library/./node_modules/ramda/es/partial.js","webpack://library/./node_modules/ramda/es/partialRight.js","webpack://library/./node_modules/ramda/es/partition.js","webpack://library/./node_modules/ramda/es/pathEq.js","webpack://library/./node_modules/ramda/es/pathOr.js","webpack://library/./node_modules/ramda/es/pathSatisfies.js","webpack://library/./node_modules/ramda/es/pick.js","webpack://library/./node_modules/ramda/es/pickAll.js","webpack://library/./node_modules/ramda/es/pickBy.js","webpack://library/./node_modules/ramda/es/pipeK.js","webpack://library/./node_modules/ramda/es/prepend.js","webpack://library/./node_modules/ramda/es/product.js","webpack://library/./node_modules/ramda/es/useWith.js","webpack://library/./node_modules/ramda/es/project.js","webpack://library/./node_modules/ramda/es/propEq.js","webpack://library/./node_modules/ramda/es/propIs.js","webpack://library/./node_modules/ramda/es/propOr.js","webpack://library/./node_modules/ramda/es/propSatisfies.js","webpack://library/./node_modules/ramda/es/props.js","webpack://library/./node_modules/ramda/es/range.js","webpack://library/./node_modules/ramda/es/reduceRight.js","webpack://library/./node_modules/ramda/es/reduceWhile.js","webpack://library/./node_modules/ramda/es/reduced.js","webpack://library/./node_modules/ramda/es/times.js","webpack://library/./node_modules/ramda/es/repeat.js","webpack://library/./node_modules/ramda/es/replace.js","webpack://library/./node_modules/ramda/es/scan.js","webpack://library/./node_modules/ramda/es/sequence.js","webpack://library/./node_modules/ramda/es/set.js","webpack://library/./node_modules/ramda/es/sort.js","webpack://library/./node_modules/ramda/es/sortBy.js","webpack://library/./node_modules/ramda/es/sortWith.js","webpack://library/./node_modules/ramda/es/split.js","webpack://library/./node_modules/ramda/es/splitAt.js","webpack://library/./node_modules/ramda/es/splitEvery.js","webpack://library/./node_modules/ramda/es/splitWhen.js","webpack://library/./node_modules/ramda/es/startsWith.js","webpack://library/./node_modules/ramda/es/subtract.js","webpack://library/./node_modules/ramda/es/symmetricDifference.js","webpack://library/./node_modules/ramda/es/symmetricDifferenceWith.js","webpack://library/./node_modules/ramda/es/takeLastWhile.js","webpack://library/./node_modules/ramda/es/internal/_xtakeWhile.js","webpack://library/./node_modules/ramda/es/takeWhile.js","webpack://library/./node_modules/ramda/es/internal/_xtap.js","webpack://library/./node_modules/ramda/es/tap.js","webpack://library/./node_modules/ramda/es/test.js","webpack://library/./node_modules/ramda/es/internal/_isRegExp.js","webpack://library/./node_modules/ramda/es/toLower.js","webpack://library/./node_modules/ramda/es/toPairs.js","webpack://library/./node_modules/ramda/es/toPairsIn.js","webpack://library/./node_modules/ramda/es/toUpper.js","webpack://library/./node_modules/ramda/es/transduce.js","webpack://library/./node_modules/ramda/es/transpose.js","webpack://library/./node_modules/ramda/es/traverse.js","webpack://library/./node_modules/ramda/es/trim.js","webpack://library/./node_modules/ramda/es/tryCatch.js","webpack://library/./node_modules/ramda/es/unapply.js","webpack://library/./node_modules/ramda/es/unary.js","webpack://library/./node_modules/ramda/es/uncurryN.js","webpack://library/./node_modules/ramda/es/unfold.js","webpack://library/./node_modules/ramda/es/union.js","webpack://library/./node_modules/ramda/es/uniqWith.js","webpack://library/./node_modules/ramda/es/unionWith.js","webpack://library/./node_modules/ramda/es/unless.js","webpack://library/./node_modules/ramda/es/unnest.js","webpack://library/./node_modules/ramda/es/until.js","webpack://library/./node_modules/ramda/es/valuesIn.js","webpack://library/./node_modules/ramda/es/view.js","webpack://library/./node_modules/ramda/es/when.js","webpack://library/./node_modules/ramda/es/where.js","webpack://library/./node_modules/ramda/es/whereEq.js","webpack://library/./node_modules/ramda/es/without.js","webpack://library/./node_modules/ramda/es/xprod.js","webpack://library/./node_modules/ramda/es/zip.js","webpack://library/./node_modules/ramda/es/zipObj.js","webpack://library/./node_modules/ramda/es/zipWith.js","webpack://library/./src/iso-codes.js","webpack://library/./src/utils.js","webpack://library/./node_modules/whatwg-fetch/fetch.js","webpack://library/./node_modules/isomorphic-fetch/fetch-npm-browserify.js","webpack://library/./src/translate.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_isPlaceholder","a","_curry1_curry1","fn","f1","arguments","length","apply","this","es_always","val","es_F","es_T","_","@@functional/placeholder","_curry2_curry2","f2","b","_b","_a","es_add","Number","_concat","set1","set2","idx","len1","len2","result","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_curryN_curryN","received","combined","argsIdx","left","combinedIdx","es_curryN","es_addIndex","origFn","list","args","Array","slice","_curry3_curry3","f3","_c","es_adjust","_idx","_list","_isArray","isArray","toString","_isTransformer","obj","_dispatchable_dispatchable","methodNames","xf","pop","transducer","_reduced","x","@@transducer/value","@@transducer/reduced","_xfBase","init","_xall_XAll","XAll","f","all","input","es_all","es_max","_map","functor","len","_isString","internal_isArrayLike","nodeType","XWrap","acc","_xwrap","es_bind","thisObj","_reduce_iterableReduce","iter","step","next","done","_reduce_methodReduce","methodName","_reduce_symIterator","Symbol","iterator","_reduce_reduce","_reduce_arrayReduce","reduce","TypeError","_xmap_XMap","XMap","internal_xmap","_has","prop","_isArguments_toString","internal_isArguments","keys_hasEnumBug","propertyIsEnumerable","keys_nonEnumerableProps","keys_hasArgsEnumBug","keys_contains","item","es_keys","keys","nIdx","ks","checkArgsLength","es_map","key","es_path","paths","es_prop","es_pluck","es_reduce","es_allPass","preds","es_and","_xany_XAny","XAny","any","internal_xany","es_any","es_anyPass","es_ap","applyF","applyX","ap","_xaperture_XAperture","XAperture","pos","full","store","getCopy","es_aperture","limit","es_append","el","es_apply","es_values","props","vals","es_applySpec","applySpec","spec","v","es_applyTo","es_ascend","aa","bb","es_assoc","_isInteger","isInteger","es_isNil","es_assocPath","assocPath","path","nextObj","arr","concat","es_nAry","es_binary","_isFunction","es_liftN","arity","lifted","es_lift","es_both","g","es_curry","es_call","_makeFlat_makeFlat","recursive","flatt","jlen","j","ilen","internal_flatCat","rxf","@@transducer/init","@@transducer/result","@@transducer/step","ret","_flatCat_preservingReduced","es_chain","monad","es_clamp","min","max","_cloneRegExp","pattern","RegExp","source","global","ignoreCase","multiline","sticky","unicode","es_type","undefined","_clone_clone","refFrom","refTo","deep","copy","copiedValue","Date","valueOf","es_clone","clone","es_comparator","pred","es_not","es_complement","_pipe","_checkForMethod_checkForMethod","methodname","es_slice","fromIndex","toIndex","es_tail","Infinity","pipe_pipe","es_reverse","split","reverse","join","compose_compose","composeK_composeK","last","_pipeP","ctx","then","pipeP_pipeP","composeP_composeP","_arrayFromIterator","push","_containsWith","es_identical","_equals_uniqContentEquals","aIterator","bIterator","stackA","stackB","eq","_equals_equals","aItem","match","typeA","equals","constructor","String","message","size","entries","values","keysA","extendedStackA","extendedStackB","es_equals","_indexOf_indexOf","inf","indexOf","_contains_contains","_quote","replace","pad","internal_toISOString","toISOString","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_complement","_filter","_isObject","_xfilter_XFilter","XFilter","es_filter","filterable","es_reject","es_toString","_toString_toString","seen","recur","y","xs","mapPairs","k","sort","test","isNaN","NaN","repr","es_concat","es_cond","pairs","pair","es_constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","es_construct","es_contains","es_converge","after","fns","context","_xreduceBy_XReduceBy","XReduceBy","valueFn","valueAcc","keyFn","inputs","es_reduceBy","elt","es_countBy","elem","es_dec","es_defaultTo","es_descend","es_difference","first","second","out","firstLen","es_differenceWith","es_dissoc","es_remove","start","count","splice","es_update","es_dissocPath","dissocPath","head","tail","es_divide","_xdrop_XDrop","XDrop","es_drop","Math","_xtake_XTake","XTake","es_take","_xdropLast_XDropLast","XDropLast","es_dropLast","_xdropLastWhile_XDropLastWhile","XDropLastWhile","retained","retain","flush","es_dropLastWhile","_xdropRepeatsWith_XDropRepeatsWith","XDropRepeatsWith","lastValue","seenFirstValue","sameAsLast","internal_xdropRepeatsWith","es_nth","offset","charAt","es_last","es_dropRepeatsWith","es_dropRepeats","_xdropWhile_XDropWhile","XDropWhile","es_dropWhile","es_or","es_either","es_empty","empty","es_takeLast","es_endsWith","suffix","es_eqBy","es_eqProps","obj1","obj2","es_evolve","evolve","transformations","transformation","type","_xfind_XFind","XFind","found","es_find","_xfindIndex_XFindIndex","XFindIndex","es_findIndex","_xfindLast_XFindLast","XFindLast","es_findLast","_xfindLastIndex_XFindLastIndex","XFindLastIndex","lastIdx","es_findLastIndex","es_flatten","es_flip","es_forEach","es_forEachObjIndexed","keyList","es_fromPairs","es_groupBy","es_groupWith","res","nextidx","es_gt","es_gte","es_has","es_hasIn","es_head","_identity","es_identity","es_ifElse","condition","onTrue","onFalse","es_inc","es_indexBy","es_indexOf","target","es_init","es_innerJoin","ys","es_insert","es_insertAll","elts","_Set_hasOrAdd","shouldAdd","set","prevSize","_items","_nativeSet","add","has","bIdx","internal_Set","_Set","Set","es_uniqBy","appliedItem","es_uniq","es_intersection","list1","list2","lookupList","filteredList","es_intersperse","separator","_assign","assign","output","nextKey","es_objOf","_stepCat_stepCatArray","_stepCat_stepCatString","_stepCat_stepCatObject","es_into","_stepCat_stepCat","es_invert","es_invertObj","es_invoker","method","es_is","Ctor","es_isEmpty","es_join","es_juxt","es_keysIn","es_lastIndexOf","lastIndexOf","_isNumber","es_length","es_lens","setter","toFunctorFn","focus","es_lensIndex","es_lensPath","es_lensProp","es_lt","es_lte","es_mapAccum","tuple","es_mapAccumRight","es_mapObjIndexed","es_match","rx","str","es_mathMod","es_maxBy","es_sum","es_mean","es_median","width","es_memoizeWith","mFn","cache","es_memoize","es_merge","es_mergeAll","es_mergeWithKey","es_mergeDeepWithKey","mergeDeepWithKey","lObj","rObj","lVal","rVal","es_mergeDeepLeft","es_mergeDeepRight","es_mergeDeepWith","es_mergeWith","_l","_r","es_min","es_minBy","es_modulo","es_multiply","es_negate","es_none","es_nthArg","es_o","es_of","es_omit","names","index","es_once","called","over_Identity","map","es_over","lens","es_pair","fst","snd","_createPartialApplicator_createPartialApplicator","es_partial","es_partialRight","es_partition","es_pathEq","_path","es_pathOr","es_pathSatisfies","propPath","es_pick","es_pickAll","es_pickBy","pipeK_pipeK","es_prepend","es_product","es_useWith","transformers","es_project","es_propEq","es_propIs","es_propOr","es_propSatisfies","es_props","ps","es_range","from","to","es_reduceRight","es_reduceWhile","es_reduced","es_times","RangeError","es_repeat","es_replace","regex","replacement","es_scan","es_sequence","of","traversable","sequence","es_set","es_sort","comparator","es_sortBy","es_sortWith","es_split","es_splitAt","array","es_splitEvery","es_splitWhen","prefix","es_startsWith","es_subtract","es_symmetricDifference","es_symmetricDifferenceWith","es_takeLastWhile","_xtakeWhile_XTakeWhile","XTakeWhile","es_takeWhile","_xtap_XTap","XTap","es_tap","es_test","es_toLower","es_toPairs","es_toPairsIn","es_toUpper","es_transduce","es_transpose","outerlist","innerlist","es_traverse","trim_ws","es_trim","trim","beginRx","endRx","es_tryCatch","tryer","catcher","e","es_unapply","es_unary","es_uncurryN","depth","endIdx","currentDepth","es_unfold","seed","es_union","es_uniqWith","es_unionWith","es_unless","whenFalseFn","es_unnest","es_until","es_valuesIn","vs","view_Const","fantasy-land/map","es_view","es_when","whenTrueFn","es_where","testObj","es_whereEq","es_without","es_xprod","es_zip","rv","es_zipObj","es_zipWith","isoCodes","code","verifyISOCode","_isoCodes","find","iso","traverse","results","loopKeys","prevPath","objKeys","_ramda","verify","phrase","revertInterpolations","placeholder","interpolations","originalPhrase","_ref","other","_objectWithoutProperties","newPhrase","_extends","regexp","_ref2","exec","lastIndex","buildEndpoint","apiKey","isoCode","encodeURIComponent","self","fetch","support","searchParams","iterable","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","forEach","callback","thisArg","items","iteratorFor","methods","Request","body","_bodyInit","Body","Response","status","statusText","headers","url","error","response","redirectStatuses","redirect","location","Promise","resolve","reject","request","xhr","XMLHttpRequest","onload","rawHeaders","options","getAllResponseHeaders","line","parts","shift","responseURL","responseText","onerror","ontimeout","open","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","readAsText","chars","fromCharCode","readArrayBufferAsText","decode","json","JSON","parse","upcased","mode","toUpperCase","referrer","form","bytes","decodeURIComponent","bodyInit","ok","bind","translate","async","_isomorphicFetch2","default","original","_utils","PLACEHOLDER","constructUrl","translations","constructUrlForPhrase","translationMap","promises","findInterpolations","replaceInterpolations","translated"],"mappings":"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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from './internal/_curry1';\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      var t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = /*#__PURE__*/_curry1(function always(val) {\n  return function () {\n    return val;\n  };\n});\nexport default always;","import always from './always';\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.T\n * @example\n *\n *      R.F(); //=> false\n */\nvar F = /*#__PURE__*/always(false);\nexport default F;","import always from './always';\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.always, R.F\n * @example\n *\n *      R.T(); //=> true\n */\nvar T = /*#__PURE__*/always(true);\nexport default T;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import _curry1 from './_curry1';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = /*#__PURE__*/_curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\nexport default add;","/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _arity from './_arity';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\nimport _curry2 from './internal/_curry2';\nimport _curryN from './internal/_curryN';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _concat from './internal/_concat';\nimport _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      var mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndex;","import _curry1 from './_curry1';\nimport _curry2 from './_curry2';\nimport _isPlaceholder from './_isPlaceholder';\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}","import _concat from './internal/_concat';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig (a -> a) -> Number -> [a] -> [a]\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n * @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n */\nvar adjust = /*#__PURE__*/_curry3(function adjust(fn, idx, list) {\n  if (idx >= list.length || idx < -list.length) {\n    return list;\n  }\n  var start = idx < 0 ? list.length : 0;\n  var _idx = start + idx;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n};","export default function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n}","import _isArray from './_isArray';\nimport _isTransformer from './_isTransformer';\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}","export default function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x : {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}","export default {\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XAll = /*#__PURE__*/function () {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n  XAll.prototype['@@transducer/result'] = function (result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAll.prototype['@@transducer/step'] = function (result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n    return result;\n  };\n\n  return XAll;\n}();\n\nvar _xall = /*#__PURE__*/_curry2(function _xall(f, xf) {\n  return new XAll(f, xf);\n});\nexport default _xall;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xall from './internal/_xall';\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      var equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nvar all = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\nexport default all;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = /*#__PURE__*/_curry2(function max(a, b) {\n  return b > a ? b : a;\n});\nexport default max;","export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}","export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}","import _curry1 from './_curry1';\nimport _isArray from './_isArray';\nimport _isString from './_isString';\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nvar _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n  if (!x) {\n    return false;\n  }\n  if (typeof x !== 'object') {\n    return false;\n  }\n  if (_isString(x)) {\n    return false;\n  }\n  if (x.nodeType === 1) {\n    return !!x.length;\n  }\n  if (x.length === 0) {\n    return true;\n  }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\nexport default _isArrayLike;","var XWrap = /*#__PURE__*/function () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n\n  return XWrap;\n}();\n\nexport default function _xwrap(fn) {\n  return new XWrap(fn);\n}","import _arity from './internal/_arity';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\nexport default bind;","import _isArrayLike from './_isArrayLike';\nimport _xwrap from './_xwrap';\nimport bind from '../bind';\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n\nexport default function _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n  if (_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XMap = /*#__PURE__*/function () {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function (result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return XMap;\n}();\n\nvar _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {\n  return new XMap(f, xf);\n});\nexport default _xmap;","export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","import _has from './_has';\n\nvar toString = Object.prototype.toString;\nvar _isArguments = function () {\n  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n};\n\nexport default _isArguments;","import _curry1 from './internal/_curry1';\nimport _has from './internal/_has';\nimport _isArguments from './internal/_isArguments';\n\n// cover IE < 9 keys issues\nvar hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n// Safari bug\nvar hasArgsEnumBug = /*#__PURE__*/function () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n} : function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n  var prop, nIdx;\n  var ks = [];\n  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n      nIdx -= 1;\n    }\n  }\n  return ks;\n};\nvar keys = /*#__PURE__*/_curry1(_keys);\nexport default keys;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _map from './internal/_map';\nimport _reduce from './internal/_reduce';\nimport _xmap from './internal/_xmap';\nimport curryN from './curryN';\nimport keys from './keys';\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nexport default map;","import _curry2 from './internal/_curry2';\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nvar path = /*#__PURE__*/_curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\nexport default path;","import _curry2 from './internal/_curry2';\nimport path from './path';\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\n\nvar prop = /*#__PURE__*/_curry2(function prop(p, obj) {\n  return path([p], obj);\n});\nexport default prop;","import _curry2 from './internal/_curry2';\nimport map from './map';\nimport prop from './prop';\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.props\n * @example\n *\n *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = /*#__PURE__*/_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;","import _curry3 from './internal/_curry3';\nimport _reduce from './internal/_reduce';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = /*#__PURE__*/_curry3(_reduce);\nexport default reduce;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass\n * @example\n *\n *      var isQueen = R.propEq('rank', 'Q');\n *      var isSpade = R.propEq('suit', '♠︎');\n *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nvar allPass = /*#__PURE__*/_curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\nexport default allPass;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if both arguments are `true`; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if it is falsy, otherwise the second argument.\n * @see R.both\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nvar and = /*#__PURE__*/_curry2(function and(a, b) {\n  return a && b;\n});\nexport default and;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XAny = /*#__PURE__*/function () {\n  function XAny(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.any = false;\n  }\n  XAny.prototype['@@transducer/init'] = _xfBase.init;\n  XAny.prototype['@@transducer/result'] = function (result) {\n    if (!this.any) {\n      result = this.xf['@@transducer/step'](result, false);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XAny.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.any = true;\n      result = _reduced(this.xf['@@transducer/step'](result, true));\n    }\n    return result;\n  };\n\n  return XAny;\n}();\n\nvar _xany = /*#__PURE__*/_curry2(function _xany(f, xf) {\n  return new XAny(f, xf);\n});\nexport default _xany;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xany from './internal/_xany';\n\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      var lessThan0 = R.flip(R.lt)(0);\n *      var lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nvar any = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\nexport default any;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      var isClub = R.propEq('suit', '♣');\n *      var isSpade = R.propEq('suit', '♠');\n *      var isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nvar anyPass = /*#__PURE__*/_curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\nexport default anyPass;","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\nimport _reduce from './internal/_reduce';\nimport map from './map';\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the second argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (a -> b -> c) -> (a -> b) -> (a -> c)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } :\n  // else\n  _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\nexport default ap;","import _concat from './_concat';\nimport _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XAperture = /*#__PURE__*/function () {\n  function XAperture(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XAperture.prototype['@@transducer/init'] = _xfBase.init;\n  XAperture.prototype['@@transducer/result'] = function (result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XAperture.prototype['@@transducer/step'] = function (result, input) {\n    this.store(input);\n    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n  };\n  XAperture.prototype.store = function (input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n  XAperture.prototype.getCopy = function () {\n    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));\n  };\n\n  return XAperture;\n}();\n\nvar _xaperture = /*#__PURE__*/_curry2(function _xaperture(n, xf) {\n  return new XAperture(n, xf);\n});\nexport default _xaperture;","import _aperture from './internal/_aperture';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xaperture from './internal/_xaperture';\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\nexport default aperture;","export default function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n}","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nvar append = /*#__PURE__*/_curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\nexport default append;","import _curry2 from './internal/_curry2';\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      var nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;","import _curry1 from './internal/_curry1';\nimport keys from './keys';\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = /*#__PURE__*/_curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\nexport default values;","import _curry1 from './internal/_curry1';\nimport apply from './apply';\nimport curryN from './curryN';\nimport map from './map';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\nimport values from './values';\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = map(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return map(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\nexport default applySpec;","import _curry2 from './internal/_curry2';\n\n/**\n* Takes a value and applies a function to it.\n*\n* This function is also known as the `thrush` combinator.\n*\n* @func\n* @memberOf R\n * @since v0.25.0\n* @category Function\n* @sig a -> (a -> b) -> b\n* @param {*} x The value\n* @param {Function} f The function to apply\n* @return {*} The result of applying `f` to `x`\n* @example\n*\n*      var t42 = R.applyTo(42);\n*      t42(R.identity); //=> 42\n*      t42(R.add(1)); //=> 43\n*/\nvar applyTo = /*#__PURE__*/_curry2(function applyTo(x, f) {\n  return f(x);\n});\nexport default applyTo;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      var byAge = R.ascend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByYoungestFirst = R.sort(byAge, people);\n */\nvar ascend = /*#__PURE__*/_curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\nexport default ascend;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig String -> a -> {k: v} -> {k: v}\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = /*#__PURE__*/_curry3(function assoc(prop, val, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n});\nexport default assoc;","/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n};","import _curry1 from './internal/_curry1';\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nvar isNil = /*#__PURE__*/_curry1(function isNil(x) {\n  return x == null;\n});\nexport default isNil;","import _curry3 from './internal/_curry3';\nimport _has from './internal/_has';\nimport _isArray from './internal/_isArray';\nimport _isInteger from './internal/_isInteger';\nimport assoc from './assoc';\nimport isNil from './isNil';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nvar assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\nexport default assocPath;","import _curry2 from './internal/_curry2';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      var takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = /*#__PURE__*/_curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.call(this);\n      };\n    case 1:\n      return function (a0) {\n        return fn.call(this, a0);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.call(this, a0, a1);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.call(this, a0, a1, a2);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.call(this, a0, a1, a2, a3);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.call(this, a0, a1, a2, a3, a4);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n      };\n    default:\n      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\nexport default nAry;","import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> c) -> (a, b -> c)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      var takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      var takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = /*#__PURE__*/_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;","export default function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n}","import _curry2 from './internal/_curry2';\nimport _reduce from './internal/_reduce';\nimport ap from './ap';\nimport curryN from './curryN';\nimport map from './map';\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      var madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function () {\n    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\nexport default liftN;","import _curry1 from './internal/_curry1';\nimport liftN from './liftN';\n\n/**\n * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      var madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n *\n *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n */\nvar lift = /*#__PURE__*/_curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\nexport default lift;","import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport and from './and';\nimport lift from './lift';\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.and\n * @example\n *\n *      var gt10 = R.gt(R.__, 10)\n *      var lt20 = R.lt(R.__, 20)\n *      var f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n */\nvar both = /*#__PURE__*/_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\nexport default both;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","import curry from './curry';\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig (*... -> a),*... -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      var indentN = R.pipe(R.repeat(' '),\n *                           R.join(''),\n *                           R.replace(/^(?!$)/gm));\n *\n *      var format = R.converge(R.call, [\n *                                  R.pipe(R.prop('indent'), indentN),\n *                                  R.prop('value')\n *                              ]);\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = /*#__PURE__*/curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;","import _isArrayLike from './_isArrayLike';\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nexport default function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}","import _forceReduced from './_forceReduced';\nimport _isArrayLike from './_isArrayLike';\nimport _reduce from './_reduce';\nimport _xfBase from './_xfBase';\n\nvar preservingReduced = function (xf) {\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return xf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      var ret = xf['@@transducer/step'](result, input);\n      return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n    }\n  };\n};\n\nvar _flatCat = function _xcat(xf) {\n  var rxf = preservingReduced(xf);\n  return {\n    '@@transducer/init': _xfBase.init,\n    '@@transducer/result': function (result) {\n      return rxf['@@transducer/result'](result);\n    },\n    '@@transducer/step': function (result, input) {\n      return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n    }\n  };\n};\n\nexport default _flatCat;","export default function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _makeFlat from './internal/_makeFlat';\nimport _xchain from './internal/_xchain';\nimport map from './map';\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      var duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;","import _curry2 from './_curry2';\nimport _flatCat from './_flatCat';\nimport map from '../map';\n\nvar _xchain = /*#__PURE__*/_curry2(function _xchain(f, xf) {\n  return map(f, _flatCat(xf));\n});\nexport default _xchain;","import _curry3 from './internal/_curry3';\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = /*#__PURE__*/_curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min ? min : value > max ? max : value;\n});\nexport default clamp;","export default function _cloneRegExp(pattern) {\n                                  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n}","import _curry1 from './internal/_curry1';\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;","import _cloneRegExp from './_cloneRegExp';\nimport type from '../type';\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n      idx += 1;\n    }\n    refFrom[idx + 1] = value;\n    refTo[idx + 1] = copiedValue;\n    for (var key in value) {\n      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy({});\n    case 'Array':\n      return copy([]);\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    default:\n      return value;\n  }\n}","import _clone from './internal/_clone';\nimport _curry1 from './internal/_curry1';\n\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n * assigned by reference rather than copied\n *\n * Dispatches to a `clone` method if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = /*#__PURE__*/_curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n});\nexport default clone;","import _curry1 from './internal/_curry1';\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = R.comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = R.sort(byAge, people);\n */\nvar comparator = /*#__PURE__*/_curry1(function comparator(pred) {\n  return function (a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\nexport default comparator;","import _curry1 from './internal/_curry1';\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = /*#__PURE__*/_curry1(function not(a) {\n  return !a;\n});\nexport default not;","import lift from './lift';\nimport not from './not';\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      var isNotNil = R.complement(R.isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nvar complement = /*#__PURE__*/lift(not);\nexport default complement;","export default function _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}","import _isArray from './_isArray';\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","import _checkForMethod from './internal/_checkForMethod';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\nexport default slice;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry1 from './internal/_curry1';\nimport slice from './slice';\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\nexport default tail;","import _arity from './internal/_arity';\nimport _pipe from './internal/_pipe';\nimport reduce from './reduce';\nimport tail from './tail';\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n}","import _curry1 from './internal/_curry1';\nimport _isString from './internal/_isString';\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = /*#__PURE__*/_curry1(function reverse(list) {\n  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();\n});\nexport default reverse;","import pipe from './pipe';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      var yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n */\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}","import chain from './chain';\nimport compose from './compose';\nimport map from './map';\n\n/**\n * Returns the right-to-left Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipeK\n * @example\n *\n *       //  get :: String -> Object -> Maybe *\n *       var get = R.curry((propName, obj) => Maybe(obj[propName]))\n *\n *       //  getStateCode :: Maybe String -> Maybe String\n *       var getStateCode = R.composeK(\n *         R.compose(Maybe.of, R.toUpper),\n *         get('state'),\n *         get('address'),\n *         get('user'),\n *       );\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n *       getStateCode({}); //=> Maybe.Nothing()\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n */\nexport default function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}","export default function _pipeP(f, g) {\n  return function () {\n    var ctx = this;\n    return f.apply(ctx, arguments).then(function (x) {\n      return g.call(ctx, x);\n    });\n  };\n}","import _arity from './internal/_arity';\nimport _pipeP from './internal/_pipeP';\nimport reduce from './reduce';\nimport tail from './tail';\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\nexport default function pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n}","import pipeP from './pipeP';\nimport reverse from './reverse';\n\n/**\n * Performs right-to-left composition of one or more Promise-returning\n * functions. The rightmost function may have any arity; the remaining\n * functions must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n * @param {...Function} functions The functions to compose\n * @return {Function}\n * @see R.pipeP\n * @example\n *\n *      var db = {\n *        users: {\n *          JOE: {\n *            name: 'Joe',\n *            followers: ['STEVE', 'SUZY']\n *          }\n *        }\n *      }\n *\n *      // We'll pretend to do a db lookup which returns a promise\n *      var lookupUser = (userId) => Promise.resolve(db.users[userId])\n *      var lookupFollowers = (user) => Promise.resolve(user.followers)\n *      lookupUser('JOE').then(lookupFollowers)\n *\n *      //  followersForUser :: String -> Promise [UserId]\n *      var followersForUser = R.composeP(lookupFollowers, lookupUser);\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\n *      // Followers: [\"STEVE\",\"SUZY\"]\n */\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n  return pipeP.apply(this, reverse(arguments));\n}","export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}","export default function _containsWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nvar identical = /*#__PURE__*/_curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\nexport default identical;","import _arrayFromIterator from './_arrayFromIterator';\nimport _containsWith from './_containsWith';\nimport _functionName from './_functionName';\nimport _has from './_has';\nimport identical from '../identical';\nimport keys from '../keys';\nimport type from '../type';\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_containsWith(function (b, aItem) {\n    return !_containsWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}","export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}","import _curry2 from './internal/_curry2';\nimport _equals from './internal/_equals';\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;","import equals from '../equals';\n\nexport default function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}","import _indexOf from './_indexOf';\n\nexport default function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}","export default function _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\nexport default _toISOString;","export default function _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}","export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}","export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XFilter = /*#__PURE__*/function () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nvar _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {\n  return new XFilter(f, xf);\n});\nexport default _xfilter;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _filter from './internal/_filter';\nimport _isObject from './internal/_isObject';\nimport _reduce from './internal/_reduce';\nimport _xfilter from './internal/_xfilter';\nimport keys from './keys';\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n    return acc;\n  }, {}, keys(filterable)) :\n  // else\n  _filter(pred, filterable);\n}));\nexport default filter;","import _complement from './internal/_complement';\nimport _curry2 from './internal/_curry2';\nimport filter from './filter';\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\nexport default reject;","import _curry1 from './internal/_curry1';\nimport _toString from './internal/_toString';\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = /*#__PURE__*/_curry1(function toString(val) {\n  return _toString(val, []);\n});\nexport default toString;","import _contains from './_contains';\nimport _map from './_map';\nimport _quote from './_quote';\nimport _toISOString from './_toISOString';\nimport keys from '../keys';\nimport reject from '../reject';\n\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function (obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n        return (/^\\d+$/.test(k)\n        );\n      }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}","import _curry2 from './internal/_curry2';\nimport _isArray from './internal/_isArray';\nimport _isFunction from './internal/_isFunction';\nimport _isString from './internal/_isString';\nimport toString from './toString';\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;","import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\nimport map from './map';\nimport max from './max';\nimport reduce from './reduce';\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nvar cond = /*#__PURE__*/_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\nexport default cond;","import _curry2 from './internal/_curry2';\nimport curry from './curry';\nimport nAry from './nAry';\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      var ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */\nvar constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function () {\n      return new Fn();\n    };\n  }\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case 1:\n        return new Fn($0);\n      case 2:\n        return new Fn($0, $1);\n      case 3:\n        return new Fn($0, $1, $2);\n      case 4:\n        return new Fn($0, $1, $2, $3);\n      case 5:\n        return new Fn($0, $1, $2, $3, $4);\n      case 6:\n        return new Fn($0, $1, $2, $3, $4, $5);\n      case 7:\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case 8:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case 9:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\nexport default constructN;","import _curry1 from './internal/_curry1';\nimport constructN from './constructN';\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      var AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      var animalSighting = R.invoker(0, 'sighting');\n *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nvar construct = /*#__PURE__*/_curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\nexport default construct;","import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.contains(3, [1, 2, 3]); //=> true\n *      R.contains(4, [1, 2, 3]); //=> false\n *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.contains([42], [[42]]); //=> true\n */\nvar contains = /*#__PURE__*/_curry2(_contains);\nexport default contains;","import _curry2 from './internal/_curry2';\nimport _map from './internal/_map';\nimport curryN from './curryN';\nimport max from './max';\nimport pluck from './pluck';\nimport reduce from './reduce';\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. When invoked, this new function is applied to some\n * arguments, each branching function is applied to those same arguments. The\n * results of each branching function are passed as arguments to the converging\n * function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      var average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nvar converge = /*#__PURE__*/_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\nexport default converge;","import _curryN from './_curryN';\nimport _has from './_has';\nimport _xfBase from './_xfBase';\n\nvar XReduceBy = /*#__PURE__*/function () {\n  function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n    this.valueFn = valueFn;\n    this.valueAcc = valueAcc;\n    this.keyFn = keyFn;\n    this.xf = xf;\n    this.inputs = {};\n  }\n  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n  XReduceBy.prototype['@@transducer/result'] = function (result) {\n    var key;\n    for (key in this.inputs) {\n      if (_has(key, this.inputs)) {\n        result = this.xf['@@transducer/step'](result, this.inputs[key]);\n        if (result['@@transducer/reduced']) {\n          result = result['@@transducer/value'];\n          break;\n        }\n      }\n    }\n    this.inputs = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n    var key = this.keyFn(input);\n    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n    return result;\n  };\n\n  return XReduceBy;\n}();\n\nvar _xreduceBy = /*#__PURE__*/_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n  return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n});\nexport default _xreduceBy;","import _curryN from './internal/_curryN';\nimport _dispatchable from './internal/_dispatchable';\nimport _has from './internal/_has';\nimport _reduce from './internal/_reduce';\nimport _xreduceBy from './internal/_xreduceBy';\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nvar reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  return _reduce(function (acc, elt) {\n    var key = keyFn(elt);\n    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n    return acc;\n  }, {}, list);\n}));\nexport default reduceBy;","import reduceBy from './reduceBy';\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexport default countBy;","import add from './add';\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nvar dec = /*#__PURE__*/add(-1);\nexport default dec;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\nexport default defaultTo;","import _curry3 from './internal/_curry3';\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      var byAge = R.descend(R.prop('age'));\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByOldestFirst = R.sort(byAge, people);\n */\nvar descend = /*#__PURE__*/_curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\nexport default descend;","import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;","import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      var cmp = (x, y) => x.a === y.a;\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      var l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n */\nvar differenceWith = /*#__PURE__*/_curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default differenceWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nvar dissoc = /*#__PURE__*/_curry2(function dissoc(prop, obj) {\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n});\nexport default dissoc;","import _curry3 from './internal/_curry3';\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nvar remove = /*#__PURE__*/_curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\nexport default remove;","import _curry3 from './internal/_curry3';\nimport adjust from './adjust';\nimport always from './always';\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nvar update = /*#__PURE__*/_curry3(function update(idx, x, list) {\n  return adjust(always(x), idx, list);\n});\nexport default update;","import _curry2 from './internal/_curry2';\nimport _isInteger from './internal/_isInteger';\nimport assoc from './assoc';\nimport dissoc from './dissoc';\nimport remove from './remove';\nimport update from './update';\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nvar dissocPath = /*#__PURE__*/_curry2(function dissocPath(path, obj) {\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _isInteger(path[0]) ? remove(path[0], 1, obj) : dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return obj;\n      } else if (_isInteger(path[0])) {\n        return update(head, dissocPath(tail, obj[head]), obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\nexport default dissocPath;","import _curry2 from './internal/_curry2';\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      var half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      var reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nvar divide = /*#__PURE__*/_curry2(function divide(a, b) {\n  return a / b;\n});\nexport default divide;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDrop = /*#__PURE__*/function () {\n  function XDrop(n, xf) {\n    this.xf = xf;\n    this.n = n;\n  }\n  XDrop.prototype['@@transducer/init'] = _xfBase.init;\n  XDrop.prototype['@@transducer/result'] = _xfBase.result;\n  XDrop.prototype['@@transducer/step'] = function (result, input) {\n    if (this.n > 0) {\n      this.n -= 1;\n      return result;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDrop;\n}();\n\nvar _xdrop = /*#__PURE__*/_curry2(function _xdrop(n, xf) {\n  return new XDrop(n, xf);\n});\nexport default _xdrop;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdrop from './internal/_xdrop';\nimport slice from './slice';\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\nexport default drop;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XTake = /*#__PURE__*/function () {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n  XTake.prototype['@@transducer/step'] = function (result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return XTake;\n}();\n\nvar _xtake = /*#__PURE__*/_curry2(function _xtake(n, xf) {\n  return new XTake(n, xf);\n});\nexport default _xtake;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xtake from './internal/_xtake';\nimport slice from './slice';\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      var personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      var takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nexport default take;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDropLast = /*#__PURE__*/function () {\n  function XDropLast(n, xf) {\n    this.xf = xf;\n    this.pos = 0;\n    this.full = false;\n    this.acc = new Array(n);\n  }\n  XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLast.prototype['@@transducer/result'] = function (result) {\n    this.acc = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLast.prototype['@@transducer/step'] = function (result, input) {\n    if (this.full) {\n      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n    }\n    this.store(input);\n    return result;\n  };\n  XDropLast.prototype.store = function (input) {\n    this.acc[this.pos] = input;\n    this.pos += 1;\n    if (this.pos === this.acc.length) {\n      this.pos = 0;\n      this.full = true;\n    }\n  };\n\n  return XDropLast;\n}();\n\nvar _xdropLast = /*#__PURE__*/_curry2(function _xdropLast(n, xf) {\n  return new XDropLast(n, xf);\n});\nexport default _xdropLast;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _dropLast from './internal/_dropLast';\nimport _xdropLast from './internal/_xdropLast';\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nvar dropLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLast, _dropLast));\nexport default dropLast;","import take from '../take';\n\nexport default function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n}","import _curry2 from './_curry2';\nimport _reduce from './_reduce';\nimport _xfBase from './_xfBase';\n\nvar XDropLastWhile = /*#__PURE__*/function () {\n  function XDropLastWhile(fn, xf) {\n    this.f = fn;\n    this.retained = [];\n    this.xf = xf;\n  }\n  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n    this.retained = null;\n    return this.xf['@@transducer/result'](result);\n  };\n  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n  };\n  XDropLastWhile.prototype.flush = function (result, input) {\n    result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n    this.retained = [];\n    return this.xf['@@transducer/step'](result, input);\n  };\n  XDropLastWhile.prototype.retain = function (result, input) {\n    this.retained.push(input);\n    return result;\n  };\n\n  return XDropLastWhile;\n}();\n\nvar _xdropLastWhile = /*#__PURE__*/_curry2(function _xdropLastWhile(fn, xf) {\n  return new XDropLastWhile(fn, xf);\n});\nexport default _xdropLastWhile;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _dropLastWhile from './internal/_dropLastWhile';\nimport _xdropLastWhile from './internal/_xdropLastWhile';\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      var lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n */\nvar dropLastWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLastWhile, _dropLastWhile));\nexport default dropLastWhile;","import slice from '../slice';\n\nexport default function dropLastWhile(pred, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n}","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDropRepeatsWith = /*#__PURE__*/function () {\n  function XDropRepeatsWith(pred, xf) {\n    this.xf = xf;\n    this.pred = pred;\n    this.lastValue = undefined;\n    this.seenFirstValue = false;\n  }\n\n  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\n  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\n  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n    var sameAsLast = false;\n    if (!this.seenFirstValue) {\n      this.seenFirstValue = true;\n    } else if (this.pred(this.lastValue, input)) {\n      sameAsLast = true;\n    }\n    this.lastValue = input;\n    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDropRepeatsWith;\n}();\n\nvar _xdropRepeatsWith = /*#__PURE__*/_curry2(function _xdropRepeatsWith(pred, xf) {\n  return new XDropRepeatsWith(pred, xf);\n});\nexport default _xdropRepeatsWith;","import _curry2 from './internal/_curry2';\nimport _isString from './internal/_isString';\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = /*#__PURE__*/_curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\nexport default nth;","import nth from './nth';\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nvar last = /*#__PURE__*/nth(-1);\nexport default last;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith';\nimport last from './last';\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nvar dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\nexport default dropRepeatsWith;","import _curry1 from './internal/_curry1';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith';\nimport dropRepeatsWith from './dropRepeatsWith';\nimport equals from './equals';\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));\nexport default dropRepeats;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XDropWhile = /*#__PURE__*/function () {\n  function XDropWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f) {\n      if (this.f(input)) {\n        return result;\n      }\n      this.f = null;\n    }\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return XDropWhile;\n}();\n\nvar _xdropWhile = /*#__PURE__*/_curry2(function _xdropWhile(f, xf) {\n  return new XDropWhile(f, xf);\n});\nexport default _xdropWhile;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xdropWhile from './internal/_xdropWhile';\nimport slice from './slice';\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */\nvar dropWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n  return slice(idx, Infinity, xs);\n}));\nexport default dropWhile;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if one or both of its arguments are `true`. Returns `false`\n * if both arguments are `false`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any} the first argument if truthy, otherwise the second argument.\n * @see R.either\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nvar or = /*#__PURE__*/_curry2(function or(a, b) {\n  return a || b;\n});\nexport default or;","import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport lift from './lift';\nimport or from './or';\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.or\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n */\nvar either = /*#__PURE__*/_curry2(function either(f, g) {\n  return _isFunction(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : lift(or)(f, g);\n});\nexport default either;","import _curry1 from './internal/_curry1';\nimport _isArguments from './internal/_isArguments';\nimport _isArray from './internal/_isArray';\nimport _isObject from './internal/_isObject';\nimport _isString from './internal/_isString';\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\nvar empty = /*#__PURE__*/_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n    return arguments;\n  }() :\n  // else\n  void 0;\n});\nexport default empty;","import _curry2 from './internal/_curry2';\nimport drop from './drop';\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nvar takeLast = /*#__PURE__*/_curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\nexport default takeLast;","import _curry2 from './internal/_curry2';\nimport equals from './equals';\nimport takeLast from './takeLast';\n\n/**\n * Checks if a list ends with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar endsWith = /*#__PURE__*/_curry2(function (suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\nexport default endsWith;","import _curry3 from './internal/_curry3';\nimport equals from './equals';\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = /*#__PURE__*/_curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\nexport default eqBy;","import _curry3 from './internal/_curry3';\nimport equals from './equals';\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nvar eqProps = /*#__PURE__*/_curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\nexport default eqProps;","import _curry2 from './internal/_curry2';\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      var transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nvar evolve = /*#__PURE__*/_curry2(function evolve(transformations, object) {\n  var result = {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];\n  }\n  return result;\n});\nexport default evolve;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XFind = /*#__PURE__*/function () {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function (result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return XFind;\n}();\n\nvar _xfind = /*#__PURE__*/_curry2(function _xfind(f, xf) {\n  return new XFind(f, xf);\n});\nexport default _xfind;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xfind from './internal/_xfind';\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nvar find = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\nexport default find;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XFindIndex = /*#__PURE__*/function () {\n  function XFindIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.found = false;\n  }\n  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindIndex.prototype['@@transducer/result'] = function (result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, -1);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n    }\n    return result;\n  };\n\n  return XFindIndex;\n}();\n\nvar _xfindIndex = /*#__PURE__*/_curry2(function _xfindIndex(f, xf) {\n  return new XFindIndex(f, xf);\n});\nexport default _xfindIndex;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xfindIndex from './internal/_xfindIndex';\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n */\nvar findIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\nexport default findIndex;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XFindLast = /*#__PURE__*/function () {\n  function XFindLast(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLast.prototype['@@transducer/result'] = function (result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n  };\n  XFindLast.prototype['@@transducer/step'] = function (result, input) {\n    if (this.f(input)) {\n      this.last = input;\n    }\n    return result;\n  };\n\n  return XFindLast;\n}();\n\nvar _xfindLast = /*#__PURE__*/_curry2(function _xfindLast(f, xf) {\n  return new XFindLast(f, xf);\n});\nexport default _xfindLast;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xfindLast from './internal/_xfindLast';\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n */\nvar findLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\nexport default findLast;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XFindLastIndex = /*#__PURE__*/function () {\n  function XFindLastIndex(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.idx = -1;\n    this.lastIdx = -1;\n  }\n  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n  XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n  };\n  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n    this.idx += 1;\n    if (this.f(input)) {\n      this.lastIdx = this.idx;\n    }\n    return result;\n  };\n\n  return XFindLastIndex;\n}();\n\nvar _xfindLastIndex = /*#__PURE__*/_curry2(function _xfindLastIndex(f, xf) {\n  return new XFindLastIndex(f, xf);\n});\nexport default _xfindLastIndex;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xfindLastIndex from './internal/_xfindLastIndex';\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n */\nvar findLastIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\nexport default findLastIndex;","import _curry1 from './internal/_curry1';\nimport _makeFlat from './internal/_makeFlat';\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = /*#__PURE__*/_curry1( /*#__PURE__*/_makeFlat(true));\nexport default flatten;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\nexport default flip;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;","import _curry2 from './internal/_curry2';\nimport keys from './keys';\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nvar forEachObjIndexed = /*#__PURE__*/_curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\nexport default forEachObjIndexed;","import _curry1 from './internal/_curry1';\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = /*#__PURE__*/_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexport default fromPairs;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\nimport reduceBy from './reduceBy';\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a String-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> String) -> [a] -> {String: [a]}\n * @param {Function} fn Function :: a -> String\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.transduce\n * @example\n *\n *      var byGrade = R.groupBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nvar groupBy = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {\n  if (acc == null) {\n    acc = [];\n  }\n  acc.push(item);\n  return acc;\n}, null)));\nexport default groupBy;","import _curry2 from './internal/_curry2';\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) → Boolean) → [a] → [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nvar groupWith = /*#__PURE__*/_curry2(function (fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\nexport default groupWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nvar gt = /*#__PURE__*/_curry2(function gt(a, b) {\n  return a > b;\n});\nexport default gt;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nvar gte = /*#__PURE__*/_curry2(function gte(a, b) {\n  return a >= b;\n});\nexport default gte;","import _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      var point = {x: 0, y: 0};\n *      var pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nvar has = /*#__PURE__*/_curry2(_has);\nexport default has;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      var square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nvar hasIn = /*#__PURE__*/_curry2(function hasIn(prop, obj) {\n  return prop in obj;\n});\nexport default hasIn;","import nth from './nth';\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nvar head = /*#__PURE__*/nth(0);\nexport default head;","export default function _identity(x) {\n  return x;\n}","import _curry1 from './internal/_curry1';\nimport _identity from './internal/_identity';\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      var obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = /*#__PURE__*/_curry1(_identity);\nexport default identity;","import _curry3 from './internal/_curry3';\nimport curryN from './curryN';\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when\n * @example\n *\n *      var incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({});           //=> { count: 1 }\n *      incCount({ count: 1 }); //=> { count: 2 }\n */\nvar ifElse = /*#__PURE__*/_curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n  });\n});\nexport default ifElse;","import add from './add';\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nvar inc = /*#__PURE__*/add(1);\nexport default inc;","import reduceBy from './reduceBy';\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n * @param {Function} fn Function :: a -> String\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nvar indexBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return elem;\n}, null);\nexport default indexBy;","import _curry2 from './internal/_curry2';\nimport _indexOf from './internal/_indexOf';\nimport _isArray from './internal/_isArray';\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nvar indexOf = /*#__PURE__*/_curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n});\nexport default indexOf;","import slice from './slice';\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nvar init = /*#__PURE__*/slice(0, -1);\nexport default init;","import _containsWith from './internal/_containsWith';\nimport _curry3 from './internal/_curry3';\nimport _filter from './internal/_filter';\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/_curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function (x) {\n    return _containsWith(pred, x, ys);\n  }, xs);\n});\nexport default innerJoin;","import _curry3 from './internal/_curry3';\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nvar insert = /*#__PURE__*/_curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\nexport default insert;","import _curry3 from './internal/_curry3';\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nvar insertAll = /*#__PURE__*/_curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));\n});\nexport default insertAll;","import _contains from './_contains';\n\nvar _Set = /*#__PURE__*/function () {\n  function _Set() {\n    /* globals Set */\n    this._nativeSet = typeof Set === 'function' ? new Set() : null;\n    this._items = {};\n  }\n\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  _Set.prototype.add = function (item) {\n    return !hasOrAdd(item, true, this);\n  };\n\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  _Set.prototype.has = function (item) {\n    return hasOrAdd(item, false, this);\n  };\n\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  return _Set;\n}();\n\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_contains(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_contains(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n// A simple Set type that honours R.equals semantics\nexport default _Set;","import _Set from './internal/_Set';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nvar uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default uniqBy;","import identity from './identity';\nimport uniqBy from './uniqBy';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = /*#__PURE__*/uniqBy(identity);\nexport default uniq;","import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\nimport _filter from './internal/_filter';\nimport flip from './flip';\nimport uniq from './uniq';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = /*#__PURE__*/_curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return uniq(_filter(flip(_contains)(lookupList), filteredList));\n});\nexport default intersection;","import _checkForMethod from './internal/_checkForMethod';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n */\nvar intersperse = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;","import _objectAssign from './_objectAssign';\n\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;","import _has from './_has';\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nexport default function _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      var matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nvar objOf = /*#__PURE__*/_curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\nexport default objOf;","import _assign from './_assign';\nimport _identity from './_identity';\nimport _isArrayLike from './_isArrayLike';\nimport _isTransformer from './_isTransformer';\nimport objOf from '../objOf';\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function (xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function (a, b) {\n    return a + b;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function (result, input) {\n    return _assign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);\n  },\n  '@@transducer/result': _identity\n};\n\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}","import _clone from './internal/_clone';\nimport _curry3 from './internal/_curry3';\nimport _isTransformer from './internal/_isTransformer';\nimport _reduce from './internal/_reduce';\nimport _stepCat from './internal/_stepCat';\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\nexport default into;","import _curry1 from './internal/_curry1';\nimport _has from './internal/_has';\nimport keys from './keys';\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      var raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nvar invert = /*#__PURE__*/_curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : out[val] = [];\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invert;","import _curry1 from './internal/_curry1';\nimport keys from './keys';\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      var raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      var raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nvar invertObj = /*#__PURE__*/_curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invertObj;","import _curry2 from './internal/_curry2';\nimport _isFunction from './internal/_isFunction';\nimport curryN from './curryN';\nimport toString from './toString';\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexport default invoker;","import _curry2 from './internal/_curry2';\n\n/**\n * See if an object (`val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = /*#__PURE__*/_curry2(function is(Ctor, val) {\n  return val != null && val.constructor === Ctor || val instanceof Ctor;\n});\nexport default is;","import _curry1 from './internal/_curry1';\nimport empty from './empty';\nimport equals from './equals';\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\nvar isEmpty = /*#__PURE__*/_curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\nexport default isEmpty;","import invoker from './invoker';\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      var spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = /*#__PURE__*/invoker(1, 'join');\nexport default join;","import _curry1 from './internal/_curry1';\nimport converge from './converge';\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nexport default juxt;","import _curry1 from './internal/_curry1';\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nvar keysIn = /*#__PURE__*/_curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\nexport default keysIn;","import _curry2 from './internal/_curry2';\nimport _isArray from './internal/_isArray';\nimport equals from './equals';\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nvar lastIndexOf = /*#__PURE__*/_curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\nexport default lastIndexOf;","export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}","import _curry1 from './internal/_curry1';\nimport _isNumber from './internal/_isNumber';\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = /*#__PURE__*/_curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\nexport default length;","import _curry2 from './internal/_curry2';\nimport map from './map';\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = /*#__PURE__*/_curry2(function lens(getter, setter) {\n  return function (toFunctorFn) {\n    return function (target) {\n      return map(function (focus) {\n        return setter(focus, target);\n      }, toFunctorFn(getter(target)));\n    };\n  };\n});\nexport default lens;","import _curry1 from './internal/_curry1';\nimport lens from './lens';\nimport nth from './nth';\nimport update from './update';\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nvar lensIndex = /*#__PURE__*/_curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\nexport default lensIndex;","import _curry1 from './internal/_curry1';\nimport assocPath from './assocPath';\nimport lens from './lens';\nimport path from './path';\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nvar lensPath = /*#__PURE__*/_curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\nexport default lensPath;","import _curry1 from './internal/_curry1';\nimport assoc from './assoc';\nimport lens from './lens';\nimport prop from './prop';\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lensProp = /*#__PURE__*/_curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\nexport default lensProp;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nvar lt = /*#__PURE__*/_curry2(function lt(a, b) {\n  return a < b;\n});\nexport default lt;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nvar lte = /*#__PURE__*/_curry2(function lte(a, b) {\n  return a <= b;\n});\nexport default lte;","import _curry3 from './internal/_curry3';\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccumRight\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = /*#__PURE__*/_curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccum;","import _curry3 from './internal/_curry3';\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *value* and *acc*, and should\n * return a tuple *[value, acc]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      var digits = ['1', '2', '3', '4'];\n *      var append = (a, b) => [a + b, a + b];\n *\n *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   [\n *     f(b, f(c, f(d, a)[0])[0])[1],\n *     f(c, f(d, a)[0])[1],\n *     f(d, a)[1],\n *   ]\n *   f(b, f(c, f(d, a)[0])[0])[0],\n * ]\n */\nvar mapAccumRight = /*#__PURE__*/_curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(list[idx], tuple[0]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [result, tuple[0]];\n});\nexport default mapAccumRight;","import _curry2 from './internal/_curry2';\nimport _reduce from './internal/_reduce';\nimport keys from './keys';\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      var values = { x: 1, y: 2, z: 3 };\n *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nvar mapObjIndexed = /*#__PURE__*/_curry2(function mapObjIndexed(fn, obj) {\n  return _reduce(function (acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\nexport default mapObjIndexed;","import _curry2 from './internal/_curry2';\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = /*#__PURE__*/_curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\nexport default match;","import _curry2 from './internal/_curry2';\nimport _isInteger from './internal/_isInteger';\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      var clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      var seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = /*#__PURE__*/_curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) {\n    return NaN;\n  }\n  if (!_isInteger(p) || p < 1) {\n    return NaN;\n  }\n  return (m % p + p) % p;\n});\nexport default mathMod;","import _curry3 from './internal/_curry3';\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nvar maxBy = /*#__PURE__*/_curry3(function maxBy(f, a, b) {\n  return f(b) > f(a) ? b : a;\n});\nexport default maxBy;","import add from './add';\nimport reduce from './reduce';\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = /*#__PURE__*/reduce(add, 0);\nexport default sum;","import _curry1 from './internal/_curry1';\nimport sum from './sum';\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nvar mean = /*#__PURE__*/_curry1(function mean(list) {\n  return sum(list) / list.length;\n});\nexport default mean;","import _curry1 from './internal/_curry1';\nimport mean from './mean';\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nvar median = /*#__PURE__*/_curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\nexport default median;","import _arity from './internal/_arity';\nimport _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return _arity(fn.length, function () {\n    var key = mFn.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nexport default memoizeWith;","import memoizeWith from './memoizeWith';\nimport toString from './toString';\n\n/**\n * Creates a new function that, when invoked, caches the result of calling `fn`\n * for a given argument set and returns the result. Subsequent calls to the\n * memoized `fn` with the same argument set will not result in an additional\n * call to `fn`; instead, the cached result for that set of arguments will be\n * returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoizeWith\n * @deprecated since v0.25.0\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoize(n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoize = /*#__PURE__*/memoizeWith(function () {\n  return toString(arguments);\n});\nexport default memoize;","import _assign from './internal/_assign';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      var resetToDefault = R.merge(R.__, {x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n */\nvar merge = /*#__PURE__*/_curry2(function merge(l, r) {\n  return _assign({}, l, r);\n});\nexport default merge;","import _assign from './internal/_assign';\nimport _curry1 from './internal/_curry1';\n\n/**\n * Merges a list of objects together into one object.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nvar mergeAll = /*#__PURE__*/_curry1(function mergeAll(list) {\n  return _assign.apply(null, [{}].concat(list));\n});\nexport default mergeAll;","import _curry3 from './internal/_curry3';\nimport _has from './internal/_has';\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = /*#__PURE__*/_curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !_has(k, result)) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\nexport default mergeWithKey;","import _curry3 from './internal/_curry3';\nimport _isObject from './internal/_isObject';\nimport mergeWithKey from './mergeWithKey';\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWithKey = /*#__PURE__*/_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function (k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\nexport default mergeDeepWithKey;","import _curry2 from './internal/_curry2';\nimport mergeDeepWithKey from './mergeDeepWithKey';\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nvar mergeDeepLeft = /*#__PURE__*/_curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepLeft;","import _curry2 from './internal/_curry2';\nimport mergeDeepWithKey from './mergeDeepWithKey';\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nvar mergeDeepRight = /*#__PURE__*/_curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepRight;","import _curry3 from './internal/_curry3';\nimport mergeDeepWithKey from './mergeDeepWithKey';\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWith = /*#__PURE__*/_curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\nexport default mergeDeepWith;","import _curry3 from './internal/_curry3';\nimport mergeWithKey from './mergeWithKey';\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = /*#__PURE__*/_curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nexport default mergeWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nvar min = /*#__PURE__*/_curry2(function min(a, b) {\n  return b < a ? b : a;\n});\nexport default min;","import _curry3 from './internal/_curry3';\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      var square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = /*#__PURE__*/_curry3(function minBy(f, a, b) {\n  return f(b) < f(a) ? b : a;\n});\nexport default minBy;","import _curry2 from './internal/_curry2';\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      var isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = /*#__PURE__*/_curry2(function modulo(a, b) {\n  return a % b;\n});\nexport default modulo;","import _curry2 from './internal/_curry2';\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      var double = R.multiply(2);\n *      var triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = /*#__PURE__*/_curry2(function multiply(a, b) {\n  return a * b;\n});\nexport default multiply;","import _curry1 from './internal/_curry1';\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nvar negate = /*#__PURE__*/_curry1(function negate(n) {\n  return -n;\n});\nexport default negate;","import _complement from './internal/_complement';\nimport _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xany from './internal/_xany';\nimport any from './any';\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *      var isOdd = n => n % 2 === 1;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none = /*#__PURE__*/_curry2( /*#__PURE__*/_complement( /*#__PURE__*/_dispatchable(['any'], _xany, any)));\nexport default none;","import _curry1 from './internal/_curry1';\nimport curryN from './curryN';\nimport nth from './nth';\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nvar nthArg = /*#__PURE__*/_curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function () {\n    return nth(n, arguments);\n  });\n});\nexport default nthArg;","import _curry3 from './internal/_curry3';\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      var classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n *      var yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nvar o = /*#__PURE__*/_curry3(function o(f, g, x) {\n  return f(g(x));\n});\nexport default o;","import _curry1 from './internal/_curry1';\nimport _of from './internal/_of';\n\n/**\n * Returns a singleton array containing the value provided.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> [a]\n * @param {*} x any value\n * @return {Array} An array wrapping `x`.\n * @example\n *\n *      R.of(null); //=> [null]\n *      R.of([42]); //=> [[42]]\n */\nvar of = /*#__PURE__*/_curry1(_of);\nexport default of;","export default function _of(x) {\n  return [x];\n}","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nvar omit = /*#__PURE__*/_curry2(function omit(names, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = names.length;\n\n  while (idx < len) {\n    index[names[idx]] = 1;\n    idx += 1;\n  }\n\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default omit;","import _arity from './internal/_arity';\nimport _curry1 from './internal/_curry1';\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nvar once = /*#__PURE__*/_curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function () {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\nexport default once;","import _curry3 from './internal/_curry3';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return { value: x, map: function (f) {\n      return Identity(f(x));\n    } };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;","import _curry2 from './internal/_curry2';\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nvar pair = /*#__PURE__*/_curry2(function pair(fst, snd) {\n  return [fst, snd];\n});\nexport default pair;","import _arity from './_arity';\nimport _curry2 from './_curry2';\n\nexport default function _createPartialApplicator(concat) {\n  return _curry2(function (fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function () {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}","import _concat from './internal/_concat';\nimport _createPartialApplicator from './internal/_createPartialApplicator';\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight\n * @example\n *\n *      var multiply2 = (a, b) => a * b;\n *      var double = R.partial(multiply2, [2]);\n *      double(2); //=> 4\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var sayHello = R.partial(greet, ['Hello']);\n *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = /*#__PURE__*/_createPartialApplicator(_concat);\nexport default partial;","import _concat from './internal/_concat';\nimport _createPartialApplicator from './internal/_createPartialApplicator';\nimport flip from './flip';\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      var greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));\nexport default partialRight;","import filter from './filter';\nimport juxt from './juxt';\nimport reject from './reject';\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition = /*#__PURE__*/juxt([filter, reject]);\nexport default partition;","import _curry3 from './internal/_curry3';\nimport equals from './equals';\nimport path from './path';\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = /*#__PURE__*/_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\nexport default pathEq;","import _curry3 from './internal/_curry3';\nimport defaultTo from './defaultTo';\nimport path from './path';\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOr = /*#__PURE__*/_curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\nexport default pathOr;","import _curry3 from './internal/_curry3';\nimport path from './path';\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n */\nvar pathSatisfies = /*#__PURE__*/_curry3(function pathSatisfies(pred, propPath, obj) {\n  return propPath.length > 0 && pred(path(propPath, obj));\n});\nexport default pathSatisfies;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nvar pick = /*#__PURE__*/_curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default pick;","import _curry2 from './internal/_curry2';\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nvar pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\nexport default pickAll;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nvar pickBy = /*#__PURE__*/_curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default pickBy;","import composeK from './composeK';\nimport reverse from './reverse';\n\n/**\n * Returns the left-to-right Kleisli composition of the provided functions,\n * each of which must return a value of a type supported by [`chain`](#chain).\n *\n * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Function\n * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n * @param {...Function}\n * @return {Function}\n * @see R.composeK\n * @example\n *\n *      //  parseJson :: String -> Maybe *\n *      //  get :: String -> Object -> Maybe *\n *\n *      //  getStateCode :: Maybe String -> Maybe String\n *      var getStateCode = R.pipeK(\n *        parseJson,\n *        get('user'),\n *        get('address'),\n *        get('state'),\n *        R.compose(Maybe.of, R.toUpper)\n *      );\n *\n *      getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n *      //=> Just('NY')\n *      getStateCode('[Invalid JSON]');\n *      //=> Nothing()\n * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n */\nexport default function pipeK() {\n  if (arguments.length === 0) {\n    throw new Error('pipeK requires at least one argument');\n  }\n  return composeK.apply(this, reverse(arguments));\n}","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = /*#__PURE__*/_curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\nexport default prepend;","import multiply from './multiply';\nimport reduce from './reduce';\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nvar product = /*#__PURE__*/reduce(multiply, 1);\nexport default product;","import _curry2 from './internal/_curry2';\nimport curryN from './curryN';\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function () {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexport default useWith;","import _map from './internal/_map';\nimport identity from './identity';\nimport pickAll from './pickAll';\nimport useWith from './useWith';\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      var kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nvar project = /*#__PURE__*/useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\nexport default project;","import _curry3 from './internal/_curry3';\nimport equals from './equals';\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.whereEq, R.propSatisfies, R.equals\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nvar propEq = /*#__PURE__*/_curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\nexport default propEq;","import _curry3 from './internal/_curry3';\nimport is from './is';\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nvar propIs = /*#__PURE__*/_curry3(function propIs(type, name, obj) {\n  return is(type, obj[name]);\n});\nexport default propIs;","import _curry3 from './internal/_curry3';\nimport _has from './internal/_has';\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nvar propOr = /*#__PURE__*/_curry3(function propOr(val, p, obj) {\n  return obj != null && _has(p, obj) ? obj[p] : val;\n});\nexport default propOr;","import _curry3 from './internal/_curry3';\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies = /*#__PURE__*/_curry3(function propSatisfies(pred, name, obj) {\n  return pred(obj[name]);\n});\nexport default propSatisfies;","import _curry2 from './internal/_curry2';\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nvar props = /*#__PURE__*/_curry2(function props(ps, obj) {\n  var len = ps.length;\n  var out = [];\n  var idx = 0;\n\n  while (idx < len) {\n    out[idx] = obj[ps[idx]];\n    idx += 1;\n  }\n\n  return out;\n});\nexport default props;","import _curry2 from './internal/_curry2';\nimport _isNumber from './internal/_isNumber';\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in tthe set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nvar range = /*#__PURE__*/_curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\nexport default range;","import _curry3 from './internal/_curry3';\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = /*#__PURE__*/_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n  return acc;\n});\nexport default reduceRight;","import _curryN from './internal/_curryN';\nimport _reduce from './internal/_reduce';\nimport _reduced from './internal/_reduced';\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator.\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      var isOdd = (acc, x) => x % 2 === 1;\n *      var xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      var ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = /*#__PURE__*/_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\nexport default reduceWhile;","import _curry1 from './internal/_curry1';\nimport _reduced from './internal/_reduced';\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * Note: this optimization is unavailable to functions not explicitly listed\n * above. For instance, it is not currently supported by\n * [`reduceRight`](#reduceRight).\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\nvar reduced = /*#__PURE__*/_curry1(_reduced);\nexport default reduced;","import _curry2 from './internal/_curry2';\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = new Array(len);\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n  return list;\n});\nexport default times;","import _curry2 from './internal/_curry2';\nimport always from './always';\nimport times from './times';\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nvar repeat = /*#__PURE__*/_curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\nexport default repeat;","import _curry3 from './internal/_curry3';\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nvar replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\nexport default replace;","import _curry3 from './internal/_curry3';\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n});\nexport default scan;","import _curry2 from './internal/_curry2';\nimport ap from './ap';\nimport map from './map';\nimport prepend from './prepend';\nimport reduceRight from './reduceRight';\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `sequence` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Function} of\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n */\nvar sequence = /*#__PURE__*/_curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {\n    return ap(map(prepend, x), acc);\n  }, of([]), traversable);\n});\nexport default sequence;","import _curry3 from './internal/_curry3';\nimport always from './always';\nimport over from './over';\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nvar set = /*#__PURE__*/_curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\nexport default set;","import _curry2 from './internal/_curry2';\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nvar sort = /*#__PURE__*/_curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\nexport default sort;","import _curry2 from './internal/_curry2';\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = R.sortBy(R.prop(0));\n *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      var people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nvar sortBy = /*#__PURE__*/_curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\nexport default sortBy;","import _curry2 from './internal/_curry2';\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @example\n *\n *      var alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      var bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      var clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      var people = [clara, bob, alice];\n *      var ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nvar sortWith = /*#__PURE__*/_curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\nexport default sortWith;","import invoker from './invoker';\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @see R.join\n * @example\n *\n *      var pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = /*#__PURE__*/invoker(1, 'split');\nexport default split;","import _curry2 from './internal/_curry2';\nimport length from './length';\nimport slice from './slice';\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nvar splitAt = /*#__PURE__*/_curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\nexport default splitAt;","import _curry2 from './internal/_curry2';\nimport slice from './slice';\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\nexport default splitEvery;","import _curry2 from './internal/_curry2';\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;","import _curry2 from './internal/_curry2';\nimport equals from './equals';\nimport take from './take';\n\n/**\n * Checks if a list starts with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = /*#__PURE__*/_curry2(function (prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\nexport default startsWith;","import _curry2 from './internal/_curry2';\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      var minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      var complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nvar subtract = /*#__PURE__*/_curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\nexport default subtract;","import _curry2 from './internal/_curry2';\nimport concat from './concat';\nimport difference from './difference';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nvar symmetricDifference = /*#__PURE__*/_curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\nexport default symmetricDifference;","import _curry3 from './internal/_curry3';\nimport concat from './concat';\nimport differenceWith from './differenceWith';\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = /*#__PURE__*/_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\nexport default symmetricDifferenceWith;","import _curry2 from './internal/_curry2';\nimport slice from './slice';\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */\nvar takeLastWhile = /*#__PURE__*/_curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\nexport default takeLastWhile;","import _curry2 from './_curry2';\nimport _reduced from './_reduced';\nimport _xfBase from './_xfBase';\n\nvar XTakeWhile = /*#__PURE__*/function () {\n  function XTakeWhile(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n  };\n\n  return XTakeWhile;\n}();\n\nvar _xtakeWhile = /*#__PURE__*/_curry2(function _xtakeWhile(f, xf) {\n  return new XTakeWhile(f, xf);\n});\nexport default _xtakeWhile;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xtakeWhile from './internal/_xtakeWhile';\nimport slice from './slice';\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      var isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n */\nvar takeWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n  return slice(0, idx, xs);\n}));\nexport default takeWhile;","import _curry2 from './_curry2';\nimport _xfBase from './_xfBase';\n\nvar XTap = /*#__PURE__*/function () {\n  function XTap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XTap.prototype['@@transducer/init'] = _xfBase.init;\n  XTap.prototype['@@transducer/result'] = _xfBase.result;\n  XTap.prototype['@@transducer/step'] = function (result, input) {\n    this.f(input);\n    return this.xf['@@transducer/step'](result, input);\n  };\n\n  return XTap;\n}();\n\nvar _xtap = /*#__PURE__*/_curry2(function _xtap(f, xf) {\n  return new XTap(f, xf);\n});\nexport default _xtap;","import _curry2 from './internal/_curry2';\nimport _dispatchable from './internal/_dispatchable';\nimport _xtap from './internal/_xtap';\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = a\n */\nvar tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nexport default tap;","import _cloneRegExp from './internal/_cloneRegExp';\nimport _curry2 from './internal/_curry2';\nimport _isRegExp from './internal/_isRegExp';\nimport toString from './toString';\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = /*#__PURE__*/_curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\nexport default test;","export default function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n}","import invoker from './invoker';\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nvar toLower = /*#__PURE__*/invoker(0, 'toLowerCase');\nexport default toLower;","import _curry1 from './internal/_curry1';\nimport _has from './internal/_has';\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nvar toPairs = /*#__PURE__*/_curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\nexport default toPairs;","import _curry1 from './internal/_curry1';\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nvar toPairsIn = /*#__PURE__*/_curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\nexport default toPairsIn;","import invoker from './invoker';\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nvar toUpper = /*#__PURE__*/invoker(0, 'toUpperCase');\nexport default toUpper;","import _reduce from './internal/_reduce';\nimport _xwrap from './internal/_xwrap';\nimport curryN from './curryN';\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      var isOdd = (x) => x % 2 === 1;\n *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;","import _curry1 from './internal/_curry1';\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nvar transpose = /*#__PURE__*/_curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\nexport default transpose;","import _curry3 from './internal/_curry3';\nimport map from './map';\nimport sequence from './sequence';\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n * @param {Function} of\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Nothing` if the given divisor is `0`\n *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n */\nvar traverse = /*#__PURE__*/_curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));\n});\nexport default traverse;","import _curry1 from './internal/_curry1';\n\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nvar _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n} : function trim(str) {\n  return str.trim();\n};\nvar trim = /*#__PURE__*/_curry1(_trim);\nexport default trim;","import _arity from './internal/_arity';\nimport _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nvar tryCatch = /*#__PURE__*/_curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function () {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\nexport default tryCatch;","import _curry1 from './internal/_curry1';\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = /*#__PURE__*/_curry1(function unapply(fn) {\n  return function () {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nexport default unapply;","import _curry1 from './internal/_curry1';\nimport nAry from './nAry';\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (* -> b) -> (a -> b)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      var takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      var takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = /*#__PURE__*/_curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;","import _curry2 from './internal/_curry2';\nimport curryN from './curryN';\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b) -> (a -> c)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry\n * @example\n *\n *      var addFour = a => b => c => d => a + b + c + d;\n *\n *      var uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = /*#__PURE__*/_curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function () {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\nexport default uncurryN;","import _curry2 from './internal/_curry2';\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      var f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = /*#__PURE__*/_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\nexport default unfold;","import _concat from './internal/_concat';\nimport _curry2 from './internal/_curry2';\nimport compose from './compose';\nimport uniq from './uniq';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = /*#__PURE__*/_curry2( /*#__PURE__*/compose(uniq, _concat));\nexport default union;","import _containsWith from './internal/_containsWith';\nimport _curry2 from './internal/_curry2';\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      var strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nvar uniqWith = /*#__PURE__*/_curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_containsWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default uniqWith;","import _concat from './internal/_concat';\nimport _curry3 from './internal/_curry3';\nimport uniqWith from './uniqWith';\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nexport default unionWith;","import _curry3 from './internal/_curry3';\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = /*#__PURE__*/_curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\nexport default unless;","import _identity from './internal/_identity';\nimport chain from './chain';\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nvar unnest = /*#__PURE__*/chain(_identity);\nexport default unnest;","import _curry3 from './internal/_curry3';\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nvar until = /*#__PURE__*/_curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\nexport default until;","import _curry1 from './internal/_curry1';\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      var F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      var f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nvar valuesIn = /*#__PURE__*/_curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\nexport default valuesIn;","import _curry2 from './internal/_curry2';\n\n// `Const` is a functor that effectively ignores the function given to `map`.\nvar Const = function (x) {\n  return { value: x, 'fantasy-land/map': function () {\n      return this;\n    } };\n};\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nvar view = /*#__PURE__*/_curry2(function view(lens, x) {\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n  return lens(Const)(x).value;\n});\nexport default view;","import _curry3 from './internal/_curry3';\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('…'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nvar when = /*#__PURE__*/_curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\nexport default when;","import _curry2 from './internal/_curry2';\nimport _has from './internal/_has';\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = /*#__PURE__*/_curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\nexport default where;","import _curry2 from './internal/_curry2';\nimport equals from './equals';\nimport map from './map';\nimport where from './where';\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\nexport default whereEq;","import _contains from './internal/_contains';\nimport _curry2 from './internal/_curry2';\nimport flip from './flip';\nimport reject from './reject';\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = /*#__PURE__*/_curry2(function (xs, list) {\n  return reject(flip(_contains)(xs), list);\n});\nexport default without;","import _curry2 from './internal/_curry2';\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nvar xprod = /*#__PURE__*/_curry2(function xprod(a, b) {\n  // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default xprod;","import _curry2 from './internal/_curry2';\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nvar zip = /*#__PURE__*/_curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\nexport default zip;","import _curry2 from './internal/_curry2';\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nvar zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\nexport default zipObj;","import _curry3 from './internal/_curry3';\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nvar zipWith = /*#__PURE__*/_curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\nexport default zipWith;","/*\n * Credits to https://gist.github.com/jrnk/8eb57b065ea0b098d571\n */\nexport const isoCodes = [\n    {\n        \"code\": \"ab\",\n        \"name\": \"Abkhaz\"\n      },\n      {\n        \"code\": \"aa\",\n        \"name\": \"Afar\"\n      },\n      {\n        \"code\": \"af\",\n        \"name\": \"Afrikaans\"\n      },\n      {\n        \"code\": \"ak\",\n        \"name\": \"Akan\"\n      },\n      {\n        \"code\": \"sq\",\n        \"name\": \"Albanian\"\n      },\n      {\n        \"code\": \"am\",\n        \"name\": \"Amharic\"\n      },\n      {\n        \"code\": \"ar\",\n        \"name\": \"Arabic\"\n      },\n      {\n        \"code\": \"an\",\n        \"name\": \"Aragonese\"\n      },\n      {\n        \"code\": \"hy\",\n        \"name\": \"Armenian\"\n      },\n      {\n        \"code\": \"as\",\n        \"name\": \"Assamese\"\n      },\n      {\n        \"code\": \"av\",\n        \"name\": \"Avaric\"\n      },\n      {\n        \"code\": \"ae\",\n        \"name\": \"Avestan\"\n      },\n      {\n        \"code\": \"ay\",\n        \"name\": \"Aymara\"\n      },\n      {\n        \"code\": \"az\",\n        \"name\": \"Azerbaijani\"\n      },\n      {\n        \"code\": \"bm\",\n        \"name\": \"Bambara\"\n      },\n      {\n        \"code\": \"ba\",\n        \"name\": \"Bashkir\"\n      },\n      {\n        \"code\": \"eu\",\n        \"name\": \"Basque\"\n      },\n      {\n        \"code\": \"be\",\n        \"name\": \"Belarusian\"\n      },\n      {\n        \"code\": \"bn\",\n        \"name\": \"Bengali; Bangla\"\n      },\n      {\n        \"code\": \"bh\",\n        \"name\": \"Bihari\"\n      },\n      {\n        \"code\": \"bi\",\n        \"name\": \"Bislama\"\n      },\n      {\n        \"code\": \"bs\",\n        \"name\": \"Bosnian\"\n      },\n      {\n        \"code\": \"br\",\n        \"name\": \"Breton\"\n      },\n      {\n        \"code\": \"bg\",\n        \"name\": \"Bulgarian\"\n      },\n      {\n        \"code\": \"my\",\n        \"name\": \"Burmese\"\n      },\n      {\n        \"code\": \"ca\",\n        \"name\": \"Catalan; Valencian\"\n      },\n      {\n        \"code\": \"ch\",\n        \"name\": \"Chamorro\"\n      },\n      {\n        \"code\": \"ce\",\n        \"name\": \"Chechen\"\n      },\n      {\n        \"code\": \"ny\",\n        \"name\": \"Chichewa; Chewa; Nyanja\"\n      },\n      {\n        \"code\": \"zh\",\n        \"name\": \"Chinese\"\n      },\n      {\n        \"code\": \"cv\",\n        \"name\": \"Chuvash\"\n      },\n      {\n        \"code\": \"kw\",\n        \"name\": \"Cornish\"\n      },\n      {\n        \"code\": \"co\",\n        \"name\": \"Corsican\"\n      },\n      {\n        \"code\": \"cr\",\n        \"name\": \"Cree\"\n      },\n      {\n        \"code\": \"hr\",\n        \"name\": \"Croatian\"\n      },\n      {\n        \"code\": \"cs\",\n        \"name\": \"Czech\"\n      },\n      {\n        \"code\": \"da\",\n        \"name\": \"Danish\"\n      },\n      {\n        \"code\": \"dv\",\n        \"name\": \"Divehi; Dhivehi; Maldivian;\"\n      },\n      {\n        \"code\": \"nl\",\n        \"name\": \"Dutch\"\n      },\n      {\n        \"code\": \"dz\",\n        \"name\": \"Dzongkha\"\n      },\n      {\n        \"code\": \"en\",\n        \"name\": \"English\"\n      },\n      {\n        \"code\": \"eo\",\n        \"name\": \"Esperanto\"\n      },\n      {\n        \"code\": \"et\",\n        \"name\": \"Estonian\"\n      },\n      {\n        \"code\": \"ee\",\n        \"name\": \"Ewe\"\n      },\n      {\n        \"code\": \"fo\",\n        \"name\": \"Faroese\"\n      },\n      {\n        \"code\": \"fj\",\n        \"name\": \"Fijian\"\n      },\n      {\n        \"code\": \"fi\",\n        \"name\": \"Finnish\"\n      },\n      {\n        \"code\": \"fr\",\n        \"name\": \"French\"\n      },\n      {\n        \"code\": \"ff\",\n        \"name\": \"Fula; Fulah; Pulaar; Pular\"\n      },\n      {\n        \"code\": \"gl\",\n        \"name\": \"Galician\"\n      },\n      {\n        \"code\": \"ka\",\n        \"name\": \"Georgian\"\n      },\n      {\n        \"code\": \"de\",\n        \"name\": \"German\"\n      },\n      {\n        \"code\": \"el\",\n        \"name\": \"Greek, Modern\"\n      },\n      {\n        \"code\": \"gn\",\n        \"name\": \"GuaranÃ­\"\n      },\n      {\n        \"code\": \"gu\",\n        \"name\": \"Gujarati\"\n      },\n      {\n        \"code\": \"ht\",\n        \"name\": \"Haitian; Haitian Creole\"\n      },\n      {\n        \"code\": \"ha\",\n        \"name\": \"Hausa\"\n      },\n      {\n        \"code\": \"he\",\n        \"name\": \"Hebrew (modern)\"\n      },\n      {\n        \"code\": \"hz\",\n        \"name\": \"Herero\"\n      },\n      {\n        \"code\": \"hi\",\n        \"name\": \"Hindi\"\n      },\n      {\n        \"code\": \"ho\",\n        \"name\": \"Hiri Motu\"\n      },\n      {\n        \"code\": \"hu\",\n        \"name\": \"Hungarian\"\n      },\n      {\n        \"code\": \"ia\",\n        \"name\": \"Interlingua\"\n      },\n      {\n        \"code\": \"id\",\n        \"name\": \"Indonesian\"\n      },\n      {\n        \"code\": \"ie\",\n        \"name\": \"Interlingue\"\n      },\n      {\n        \"code\": \"ga\",\n        \"name\": \"Irish\"\n      },\n      {\n        \"code\": \"ig\",\n        \"name\": \"Igbo\"\n      },\n      {\n        \"code\": \"ik\",\n        \"name\": \"Inupiaq\"\n      },\n      {\n        \"code\": \"io\",\n        \"name\": \"Ido\"\n      },\n      {\n        \"code\": \"is\",\n        \"name\": \"Icelandic\"\n      },\n      {\n        \"code\": \"it\",\n        \"name\": \"Italian\"\n      },\n      {\n        \"code\": \"iu\",\n        \"name\": \"Inuktitut\"\n      },\n      {\n        \"code\": \"ja\",\n        \"name\": \"Japanese\"\n      },\n      {\n        \"code\": \"jv\",\n        \"name\": \"Javanese\"\n      },\n      {\n        \"code\": \"kl\",\n        \"name\": \"Kalaallisut, Greenlandic\"\n      },\n      {\n        \"code\": \"kn\",\n        \"name\": \"Kannada\"\n      },\n      {\n        \"code\": \"kr\",\n        \"name\": \"Kanuri\"\n      },\n      {\n        \"code\": \"ks\",\n        \"name\": \"Kashmiri\"\n      },\n      {\n        \"code\": \"kk\",\n        \"name\": \"Kazakh\"\n      },\n      {\n        \"code\": \"km\",\n        \"name\": \"Khmer\"\n      },\n      {\n        \"code\": \"ki\",\n        \"name\": \"Kikuyu, Gikuyu\"\n      },\n      {\n        \"code\": \"rw\",\n        \"name\": \"Kinyarwanda\"\n      },\n      {\n        \"code\": \"ky\",\n        \"name\": \"Kyrgyz\"\n      },\n      {\n        \"code\": \"kv\",\n        \"name\": \"Komi\"\n      },\n      {\n        \"code\": \"kg\",\n        \"name\": \"Kongo\"\n      },\n      {\n        \"code\": \"ko\",\n        \"name\": \"Korean\"\n      },\n      {\n        \"code\": \"ku\",\n        \"name\": \"Kurdish\"\n      },\n      {\n        \"code\": \"kj\",\n        \"name\": \"Kwanyama, Kuanyama\"\n      },\n      {\n        \"code\": \"la\",\n        \"name\": \"Latin\"\n      },\n      {\n        \"code\": \"lb\",\n        \"name\": \"Luxembourgish, Letzeburgesch\"\n      },\n      {\n        \"code\": \"lg\",\n        \"name\": \"Ganda\"\n      },\n      {\n        \"code\": \"li\",\n        \"name\": \"Limburgish, Limburgan, Limburger\"\n      },\n      {\n        \"code\": \"ln\",\n        \"name\": \"Lingala\"\n      },\n      {\n        \"code\": \"lo\",\n        \"name\": \"Lao\"\n      },\n      {\n        \"code\": \"lt\",\n        \"name\": \"Lithuanian\"\n      },\n      {\n        \"code\": \"lu\",\n        \"name\": \"Luba-Katanga\"\n      },\n      {\n        \"code\": \"lv\",\n        \"name\": \"Latvian\"\n      },\n      {\n        \"code\": \"gv\",\n        \"name\": \"Manx\"\n      },\n      {\n        \"code\": \"mk\",\n        \"name\": \"Macedonian\"\n      },\n      {\n        \"code\": \"mg\",\n        \"name\": \"Malagasy\"\n      },\n      {\n        \"code\": \"ms\",\n        \"name\": \"Malay\"\n      },\n      {\n        \"code\": \"ml\",\n        \"name\": \"Malayalam\"\n      },\n      {\n        \"code\": \"mt\",\n        \"name\": \"Maltese\"\n      },\n      {\n        \"code\": \"mi\",\n        \"name\": \"MÄori\"\n      },\n      {\n        \"code\": \"mr\",\n        \"name\": \"Marathi (MarÄá¹­hÄ«)\"\n      },\n      {\n        \"code\": \"mh\",\n        \"name\": \"Marshallese\"\n      },\n      {\n        \"code\": \"mn\",\n        \"name\": \"Mongolian\"\n      },\n      {\n        \"code\": \"na\",\n        \"name\": \"Nauru\"\n      },\n      {\n        \"code\": \"nv\",\n        \"name\": \"Navajo, Navaho\"\n      },\n      {\n        \"code\": \"nb\",\n        \"name\": \"Norwegian BokmÃ¥l\"\n      },\n      {\n        \"code\": \"nd\",\n        \"name\": \"North Ndebele\"\n      },\n      {\n        \"code\": \"ne\",\n        \"name\": \"Nepali\"\n      },\n      {\n        \"code\": \"ng\",\n        \"name\": \"Ndonga\"\n      },\n      {\n        \"code\": \"nn\",\n        \"name\": \"Norwegian Nynorsk\"\n      },\n      {\n        \"code\": \"no\",\n        \"name\": \"Norwegian\"\n      },\n      {\n        \"code\": \"ii\",\n        \"name\": \"Nuosu\"\n      },\n      {\n        \"code\": \"nr\",\n        \"name\": \"South Ndebele\"\n      },\n      {\n        \"code\": \"oc\",\n        \"name\": \"Occitan\"\n      },\n      {\n        \"code\": \"oj\",\n        \"name\": \"Ojibwe, Ojibwa\"\n      },\n      {\n        \"code\": \"cu\",\n        \"name\": \"Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic\"\n      },\n      {\n        \"code\": \"om\",\n        \"name\": \"Oromo\"\n      },\n      {\n        \"code\": \"or\",\n        \"name\": \"Oriya\"\n      },\n      {\n        \"code\": \"os\",\n        \"name\": \"Ossetian, Ossetic\"\n      },\n      {\n        \"code\": \"pa\",\n        \"name\": \"Panjabi, Punjabi\"\n      },\n      {\n        \"code\": \"pi\",\n        \"name\": \"PÄli\"\n      },\n      {\n        \"code\": \"fa\",\n        \"name\": \"Persian (Farsi)\"\n      },\n      {\n        \"code\": \"pl\",\n        \"name\": \"Polish\"\n      },\n      {\n        \"code\": \"ps\",\n        \"name\": \"Pashto, Pushto\"\n      },\n      {\n        \"code\": \"pt\",\n        \"name\": \"Portuguese\"\n      },\n      {\n        \"code\": \"qu\",\n        \"name\": \"Quechua\"\n      },\n      {\n        \"code\": \"rm\",\n        \"name\": \"Romansh\"\n      },\n      {\n        \"code\": \"rn\",\n        \"name\": \"Kirundi\"\n      },\n      {\n        \"code\": \"ro\",\n        \"name\": \"Romanian, [])\"\n      },\n      {\n        \"code\": \"ru\",\n        \"name\": \"Russian\"\n      },\n      {\n        \"code\": \"sa\",\n        \"name\": \"Sanskrit (Saá¹ská¹›ta)\"\n      },\n      {\n        \"code\": \"sc\",\n        \"name\": \"Sardinian\"\n      },\n      {\n        \"code\": \"sd\",\n        \"name\": \"Sindhi\"\n      },\n      {\n        \"code\": \"se\",\n        \"name\": \"Northern Sami\"\n      },\n      {\n        \"code\": \"sm\",\n        \"name\": \"Samoan\"\n      },\n      {\n        \"code\": \"sg\",\n        \"name\": \"Sango\"\n      },\n      {\n        \"code\": \"sr\",\n        \"name\": \"Serbian\"\n      },\n      {\n        \"code\": \"gd\",\n        \"name\": \"Scottish Gaelic; Gaelic\"\n      },\n      {\n        \"code\": \"sn\",\n        \"name\": \"Shona\"\n      },\n      {\n        \"code\": \"si\",\n        \"name\": \"Sinhala, Sinhalese\"\n      },\n      {\n        \"code\": \"sk\",\n        \"name\": \"Slovak\"\n      },\n      {\n        \"code\": \"sl\",\n        \"name\": \"Slovene\"\n      },\n      {\n        \"code\": \"so\",\n        \"name\": \"Somali\"\n      },\n      {\n        \"code\": \"st\",\n        \"name\": \"Southern Sotho\"\n      },\n      {\n        \"code\": \"az\",\n        \"name\": \"South Azerbaijani\"\n      },\n      {\n        \"code\": \"es\",\n        \"name\": \"Spanish; Castilian\"\n      },\n      {\n        \"code\": \"su\",\n        \"name\": \"Sundanese\"\n      },\n      {\n        \"code\": \"sw\",\n        \"name\": \"Swahili\"\n      },\n      {\n        \"code\": \"ss\",\n        \"name\": \"Swati\"\n      },\n      {\n        \"code\": \"sv\",\n        \"name\": \"Swedish\"\n      },\n      {\n        \"code\": \"ta\",\n        \"name\": \"Tamil\"\n      },\n      {\n        \"code\": \"te\",\n        \"name\": \"Telugu\"\n      },\n      {\n        \"code\": \"tg\",\n        \"name\": \"Tajik\"\n      },\n      {\n        \"code\": \"th\",\n        \"name\": \"Thai\"\n      },\n      {\n        \"code\": \"ti\",\n        \"name\": \"Tigrinya\"\n      },\n      {\n        \"code\": \"bo\",\n        \"name\": \"Tibetan Standard, Tibetan, Central\"\n      },\n      {\n        \"code\": \"tk\",\n        \"name\": \"Turkmen\"\n      },\n      {\n        \"code\": \"tl\",\n        \"name\": \"Tagalog\"\n      },\n      {\n        \"code\": \"tn\",\n        \"name\": \"Tswana\"\n      },\n      {\n        \"code\": \"to\",\n        \"name\": \"Tonga (Tonga Islands)\"\n      },\n      {\n        \"code\": \"tr\",\n        \"name\": \"Turkish\"\n      },\n      {\n        \"code\": \"ts\",\n        \"name\": \"Tsonga\"\n      },\n      {\n        \"code\": \"tt\",\n        \"name\": \"Tatar\"\n      },\n      {\n        \"code\": \"tw\",\n        \"name\": \"Twi\"\n      },\n      {\n        \"code\": \"ty\",\n        \"name\": \"Tahitian\"\n      },\n      {\n        \"code\": \"ug\",\n        \"name\": \"Uyghur, Uighur\"\n      },\n      {\n        \"code\": \"uk\",\n        \"name\": \"Ukrainian\"\n      },\n      {\n        \"code\": \"ur\",\n        \"name\": \"Urdu\"\n      },\n      {\n        \"code\": \"uz\",\n        \"name\": \"Uzbek\"\n      },\n      {\n        \"code\": \"ve\",\n        \"name\": \"Venda\"\n      },\n      {\n        \"code\": \"vi\",\n        \"name\": \"Vietnamese\"\n      },\n      {\n        \"code\": \"vo\",\n        \"name\": \"VolapÃ¼k\"\n      },\n      {\n        \"code\": \"wa\",\n        \"name\": \"Walloon\"\n      },\n      {\n        \"code\": \"cy\",\n        \"name\": \"Welsh\"\n      },\n      {\n        \"code\": \"wo\",\n        \"name\": \"Wolof\"\n      },\n      {\n        \"code\": \"fy\",\n        \"name\": \"Western Frisian\"\n      },\n      {\n        \"code\": \"xh\",\n        \"name\": \"Xhosa\"\n      },\n      {\n        \"code\": \"yi\",\n        \"name\": \"Yiddish\"\n      },\n      {\n        \"code\": \"yo\",\n        \"name\": \"Yoruba\"\n      },\n      {\n        \"code\": \"za\",\n        \"name\": \"Zhuang, Chuang\"\n      },\n      {\n        \"code\": \"zu\",\n        \"name\": \"Zulu\"\n      }    \n];","import { keys } from \"ramda\";\n\nimport { isoCodes } from \"./iso-codes\";\n\nexport const verifyISOCode = code => !!isoCodes.find(iso => iso.code === code);\n\nexport const traverse = obj => {\n    const verify = obj => typeof obj === \"string\" || typeof obj === \"number\";\n    const results = [];\n    (function loopKeys(obj, prevPath) {\n        const objKeys = keys(obj);\n        objKeys.map(k => {\n            let path = [];\n            if (prevPath) path = prevPath;\n            if (!verify(obj[k])) {\n                path.push(k);\n                return loopKeys(obj[k], path);\n            }\n\n            results.push({\n                path: [].concat(path, k),\n                phrase: obj[k]\n            });\n        });\n    })(obj);\n    return results;\n};\n\nexport const revertInterpolations = placeholder => ({\n    interpolations,\n    phrase\n}) => {\n    let originalPhrase = new String(phrase);\n    if (!interpolations || !interpolations.length) return phrase;\n    interpolations.map(({ value }) => {\n        originalPhrase = originalPhrase.replace(placeholder, () => value);\n    });\n    return originalPhrase;\n};\n\nexport const replaceInterpolations = placeholder => ({\n    interpolations,\n    phrase,\n    ...other\n}) => {\n    let newPhrase = new String(phrase);\n    interpolations.map(({ value }) => {\n        newPhrase = newPhrase.replace(value, () => placeholder);\n    });\n    return { phrase: newPhrase.toString(), interpolations, ...other };\n};\n\nexport const findInterpolations = regexp => ({ phrase, ...other }) => {\n    const regex = new RegExp(regexp.toString(), \"g\");\n    const interpolations = [];\n    let match;\n    while ((match = regex.exec(phrase))) {\n        if (match) {\n            interpolations.push({ value: match[0], index: regex.lastIndex });\n        }\n    }\n    return {\n        interpolations,\n        phrase,\n        ...other\n    };\n};\n\nexport const buildEndpoint = (apiKey, isoCode, phrase) =>\n    \"https://translate.yandex.net/api/v1.5/tr.json/translate?\" +\n    `lang=${isoCode}` +\n    `&key=${apiKey}` +\n    `&text=${encodeURIComponent(phrase)}`;\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","import fetch from \"isomorphic-fetch\";\nimport { assocPath, curry, pipe, map } from \"ramda\";\nimport {\n    traverse,\n    buildEndpoint,\n    findInterpolations,\n    replaceInterpolations,\n    revertInterpolations,\n    verifyISOCode\n} from \"./utils\";\n\nexport const translate = async ({ path, interpolations, url }) =>\n    await fetch(url, { method: \"POST\" })\n        .then(res => res.json())\n        .then(res => {\n            const phrase = res.text.join();\n            const original = revertInterpolations(PLACEHOLDER)({\n                phrase,\n                interpolations\n            });\n            return Promise.resolve({\n                path,\n                original\n            });\n        });\n\nconst PLACEHOLDER = \"$$$\";\n\nexport const constructUrl = ({ apiKey, isoCode }) => phrase =>\n    buildEndpoint(apiKey, isoCode, phrase);\n\nexport default async ({ apiKey, isoCode, translations, regexp = \"\" }) => {\n    if (!verifyISOCode(isoCode))\n        return Promise.reject(new Error(\"Please supply a valid iso code\"));\n    const constructUrlForPhrase = constructUrl({ apiKey, isoCode });\n    const translationMap = traverse(translations);\n    const promises = [];\n    translationMap\n        .map(findInterpolations(regexp))\n        .map(replaceInterpolations(PLACEHOLDER))\n        .forEach(({ path, phrase, interpolations }) => {\n            const url = constructUrlForPhrase(phrase);\n            promises.push(translate({ path, interpolations, url }));\n        });\n\n    return await Promise.all(promises).then(translated => {\n        let translations = {};\n        translated.forEach(({ path, original }) => {\n            translations = assocPath(path, original, translations);\n        });\n        return translations;\n    });\n};\n"],"sourceRoot":""}